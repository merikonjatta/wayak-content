<!-- vim: set noexpandtab shiftwidth=4 wrap linebreak filetype=mediawiki: -->
{{#set: title=第9章: 起動パラメータリファレンス}}
{{Nav
|prev=LKN/Chapter8
|next=LKN/Chapter10
}}

= 第9章: 起動パラメータリファレンス =

本章の内容の大部分はカーネル付属のコマンドラインオプションリファレンスに基づいています。このリファレンスはカーネル開発者によって書かれ、GPLで公開されています。

カーネルにオプションを渡して動作を変更させる方法は主に3つあります。

* カーネルのビルド時。本書の大半はこれについて書かれています。
* カーネルのブート時。GRUBやLILOなどのブートファイルからパラメータが渡されます。
* ランタイムに、''/proc''や''/sys''ディレクトリに書き込みます。

この章では2つ目の方法にフォーカスし、ブート時に与えれるオプションを概念的な分類に分けて説明します。特定のアーキテクチャーやデバイスに依存するいくつかのオプションは省きました。全オプションの網羅的なリストはカーネルソースの''Documentation/kernel-parameters.txt''ファイル、あるいは各アーキテクチャ用のドキュメンテーションを参照してください。

ここで紹介したオプションは必ずしも常に利用できるとは限りません。特定のサブシステムに依存するものが多いため、カーネルのコンフィギュレーションでそれらを有効にしていないと指定できないことになります。また、関連するハードウェアが存在する必要があります。

パラメータは全てCase-sensitiveです。

== モジュール固有のオプション ==

ここで紹介するオプションに加えて、カーネルに組み込みのモジュールについてもコマンドラインに渡すことができます。（もちろん、動的に読み込まれるモジュールはブート時にメモリ上に存在しないためパラメータを受け付けません。）モジュール用パラメータの指定は、「モジュール名.パラメータ名」となります。

例えば''usbcore''モジュールには''blinkenlights''というオプションを指定でき、これを使うと対応するUSB2.0ハブのLEDを点滅させられます（たまにはジョークも混ぜてくるのがカーネル開発者の素敵なところです）。このパラメータを動的にロードするには、
 $ '''modprobe usbcore blinkenlights=1'''
一方、''usbcore''モジュールがカーネルに組み込まれているなら、カーネル起動時に次のオプションを渡すことで同じ効果が実現できます。
 usbcore.blinkenlights=1
また、組み込みモジュールのオプションの大半は''/sys/module''ディレクトリの適切なファイルに書きこむことで動作中に変更できます。例えば''blinkenlights''オプションだと''/sys/module/usbcore/blinkenlights''ファイルです。


== コンソールのオプション ==

これらのオプションは、カーネルのデバッグ及びエラー情報が表示される、コンソールもしくはカーネル・ログに関わるものです。

=== console ===

出力先コンソールデバイスとそのオプション。

{|class=commandref
|-
!console=Options
|-
!tty''n''
|-
|バーチャルコンソールデバイス''n''を使用する。
|-
!tty''Sn''[,''options''],ttyUSB0[,''options'']
|-
|指定したシリアルポートを使用する。optionsは''bbbbpnf''という形式で指定する。''bbbb''はボーレート、''p''はパリティ（n, oまたはe）、''n''はビット数、''f''はフローコントロール（rでRTS、もしくは省略）。デフォルトは''9600n8''。
シリアルコンソールの使い方については''Documentation/serial-control.txt''を参照のこと。コンソールを利用したいがシリアルポートがない場合は''netconsole''オプションを参照のこと。
|-
!uart,io,''addr''[,''options''],uart,mmio,''addr''[,''options'']
|-
|ポーリング型のコンソールを8250/16550UARTで開始し、指定したI/OポートまたはMMIOアドレスを利用し、後にttySに切り替える。オプションの指定方法は前述のttySと同じ。
|}


=== netconsole ===

コンソールのデータをネットワーク経由で出力する。

{|class=commandref
|-
!netconsole=[''src-port'']@[''src-op'']/[''dev''],[''target-port'']@''target-ip''/[''target-mac-address'']
|-
|カーネルのコンソールデータをUDPパケットとしてネットワーク越しに別のマシンに送信する。オプション：
|-
!src-port
|-
|UDPパケットのソースポート。デフォルトは6665
|-
!src-ip
|-
|ソースのIPアドレス。
|-
!dev
|-
|使用するネットワークデバイス。''eth0''など。netconsoleのデータは通常のネットワーク利用を阻害するものではないので、普通のネットワークカードを指定して良い。
|-
!target-port
|-
|対象マシンのロギングエージェントが使うポート。デフォルトは6666
|-
!target-mac-address
|-
|対象マシンのロギングエージェントが使うMACアドレス。
このデータを受信するには、リモートマシンで''syslogd''を動かせば良い。もしくは''netcat''を次のようにして使う。
 netcat -u -l -p port
詳細は''Documentation/networking/netconsole.txt''を参照。
|}

=== debug ===

カーネルデバッグを有効にする。

カーネルのログレベルがdebugに設定され、全てのデバッグメッセージがコンソールに出力されるようになる。

=== quiet ===

ログを全て無効にする。

カーネルのログレベルをKERN_WARNING (4)に設定する。これによって極めて重要なメッセージ以外は出力されなくなる。（ログレベルは''loglevel''パラメータで定義される。）

=== earlyprintk ===

初期ブートメッセージを表示する。

{|class=commandref
!earlyprintk=[''vga''|''serial''][,tty''Sn''[,''baudrate'']][,keep]
|-
|従来のコンソールが初期化される以前のカーネルログを出力する。これらのメッセージはこのオプションを有効にしないと表示されることはないので、ハードウェアの問題を突き止めるのに便利。オプションにはVGAまたはシリアルポートを指定できるが、同時には指定できない。また、シリアルは''ttyS0''か''ttyS1''しか利用できない。通常のシリアルドライバではあまりうまく操作ができないが、VGAもいずれ普通のコンソール出力で上書きされてしまう。
'',keep''を付加しておけば普通のコンソール出力が出ても初期メッセージが上書きされない。
|}

=== loglevel ===

コンソールのログレベルを指定する。

{|class=commandref
!loglevel=''level''
|-
|コンソールのログレベルを指定する。指定した値より小さいレベルの（つまり優先度の高い）メッセージはコンソールに出力され、指定した値以上のレベルのメッセージは出力されない。
コンソールのログレベルは''klogd''プログラムでも変更できるし、''/proc/sys/kernel/printk''ファイルに書きこむことでも変更できる。
利用できるログレベルは：
|-
!0 (KERN_EMERG)
|-
|システムが動作不能
|-
!1 (KERN_ALERT)
|-
|即座に対応を必要とする状況
|-
!2 (KERN_CRIT)
|-
|致命的な状況
|-
!3 (KERN_ERR)
|-
|致命的でないエラー
|-
!4 (KERN_WARNING)
|-
|対策が必要な警告
|-
!5 (KERN_NOTICE)
|-
|問題ではないが気を留めるべき状況
|-
!6 (KERN_INFO)
|-
|対策を必要としないメッセージ
|-
!7 (KERN_DEBUG)
|-
|デバッグメッセージ。ビルド時にデバッグオプションがONの時のみ。
|}

=== log_buf_len ===

カーネルログバッファの大きさを指定。

{|class=commandref
!log_buf_len=''n''[KMG]
|-
|カーネルの内部ログバッファの大きさを指定する。''n''は2のべき乗で指定。2のべき乗でないときは2のべき乗へ切り上げられる。このオプションはカーネルの''CONFIG_LOG_BUF_SHIFT''コンフィギュレーションでも指定できる。
|}

=== initcall_debug ===

initcall関数をデバッグする。

カーネルのブート時に呼ばれる全ての関数をトレースする。ブート時にカーネルが落ちる場合、具体的にどこで落ちているのかを確認するのに便利。

=== kstack ===

Oopsダンプ時にスタックから何ワード出力するかを指定。

{|class=commandref
!kstack=''n''
|-
|カーネルのOopsダンプ時にスタックから何ワード出力するかを指定する。''n''は整数。
|}

=== time ===

カーネルログの全メッセージに時刻を付与する。


<references/>


{{Nav
|prev=LKN/Chapter8
|next=LKN/Chapter10
}}
