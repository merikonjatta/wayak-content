<!-- vim: set noexpandtab shiftwidth=4 wrap linebreak filetype=mediawiki: -->
{{#set: title=第9章: 起動パラメータリファレンス}}
{{Nav
|prev=LKN/Chapter8
|next=LKN/Chapter10
}}

= 第9章: 起動パラメータリファレンス =

本章の内容の大部分はカーネル付属のコマンドラインオプションリファレンスに基づいています。このリファレンスはカーネル開発者によって書かれ、GPLで公開されています。

カーネルにオプションを渡して動作を変更させる方法は主に3つあります。

* カーネルのビルド時。本書の大半はこれについて書かれています。
* カーネルのブート時。GRUBやLILOなどのブートファイルからパラメータが渡されます。
* ランタイムに、''/proc''や''/sys''ディレクトリに書き込みます。

この章では2つ目の方法にフォーカスし、ブート時に与えれるオプションを概念的な分類に分けて説明します。特定のアーキテクチャーやデバイスに依存するいくつかのオプションは省きました。全オプションの網羅的なリストはカーネルソースの''Documentation/kernel-parameters.txt''ファイル、あるいは各アーキテクチャ用のドキュメンテーションを参照してください。

ここで紹介したオプションは必ずしも常に利用できるとは限りません。特定のサブシステムに依存するものが多いため、カーネルのコンフィギュレーションでそれらを有効にしていないと指定できないことになります。また、関連するハードウェアが存在する必要があります。

パラメータは全てCase-sensitiveです。

== モジュール固有のオプション ==

ここで紹介するオプションに加えて、カーネルに組み込みのモジュールについてもコマンドラインに渡すことができます。（もちろん、動的に読み込まれるモジュールはブート時にメモリ上に存在しないためパラメータを受け付けません。）モジュール用パラメータの指定は、「モジュール名.パラメータ名」となります。

例えば''usbcore''モジュールには''blinkenlights''というオプションを指定でき、これを使うと対応するUSB2.0ハブのLEDを点滅させられます（たまにはジョークも混ぜてくるのがカーネル開発者の素敵なところです）。このパラメータを動的にロードするには、
 $ '''modprobe usbcore blinkenlights=1'''
一方、''usbcore''モジュールがカーネルに組み込まれているなら、カーネル起動時に次のオプションを渡すことで同じ効果が実現できます。
 usbcore.blinkenlights=1
また、組み込みモジュールのオプションの大半は''/sys/module''ディレクトリの適切なファイルに書きこむことで動作中に変更できます。例えば''blinkenlights''オプションだと''/sys/module/usbcore/blinkenlights''ファイルです。


== コンソールのオプション ==

これらのオプションは、カーネルのデバッグ及びエラー情報が表示される、コンソールもしくはカーネル・ログに関わるものです。

=== console ===

出力先コンソールデバイスとそのオプション。

{|class=commandref
|-
!console=Options
|-
!tty''n''
|-
|バーチャルコンソールデバイス''n''を使用する。
|-
!tty''Sn''[,''options''],ttyUSB0[,''options'']
|-
|指定したシリアルポートを使用する。optionsは''bbbbpnf''という形式で指定する。''bbbb''はボーレート、''p''はパリティ（n, oまたはe）、''n''はビット数、''f''はフローコントロール（rでRTS、もしくは省略）。デフォルトは''9600n8''。
シリアルコンソールの使い方については''Documentation/serial-control.txt''を参照のこと。コンソールを利用したいがシリアルポートがない場合は''netconsole''オプションを参照のこと。
|-
!uart,io,''addr''[,''options''],uart,mmio,''addr''[,''options'']
|-
|ポーリング型のコンソールを8250/16550UARTで開始し、指定したI/OポートまたはMMIOアドレスを利用し、後にttySに切り替える。オプションの指定方法は前述のttySと同じ。
|}


=== netconsole ===

コンソールのデータをネットワーク経由で出力する。

{|class=commandref
|-
!netconsole=[''src-port'']@[''src-op'']/[''dev''],[''target-port'']@''target-ip''/[''target-mac-address'']
|-
|カーネルのコンソールデータをUDPパケットとしてネットワーク越しに別のマシンに送信する。オプション：
|-
!src-port
|-
|UDPパケットのソースポート。デフォルトは6665
|-
!src-ip
|-
|ソースのIPアドレス。
|-
!dev
|-
|使用するネットワークデバイス。''eth0''など。netconsoleのデータは通常のネットワーク利用を阻害するものではないので、普通のネットワークカードを指定して良い。
|-
!target-port
|-
|対象マシンのロギングエージェントが使うポート。デフォルトは6666
|-
!target-mac-address
|-
|対象マシンのロギングエージェントが使うMACアドレス。
このデータを受信するには、リモートマシンで''syslogd''を動かせば良い。もしくは''netcat''を次のようにして使う。
 netcat -u -l -p port
詳細は''Documentation/networking/netconsole.txt''を参照。
|}

=== debug ===

カーネルデバッグを有効にする。

カーネルのログレベルがdebugに設定され、全てのデバッグメッセージがコンソールに出力されるようになる。

=== quiet ===

ログを全て無効にする。

カーネルのログレベルをKERN_WARNING (4)に設定する。これによって極めて重要なメッセージ以外は出力されなくなる。（ログレベルは''loglevel''パラメータで定義される。）

=== earlyprintk ===

初期ブートメッセージを表示する。

{|class=commandref
!earlyprintk=[''vga''|''serial''][,tty''Sn''[,''baudrate'']][,keep]
|-
|従来のコンソールが初期化される以前のカーネルログを出力する。これらのメッセージはこのオプションを有効にしないと表示されることはないので、ハードウェアの問題を突き止めるのに便利。オプションにはVGAまたはシリアルポートを指定できるが、同時には指定できない。また、シリアルは''ttyS0''か''ttyS1''しか利用できない。通常のシリアルドライバではあまりうまく操作ができないが、VGAもいずれ普通のコンソール出力で上書きされてしまう。
'',keep''を付加しておけば普通のコンソール出力が出ても初期メッセージが上書きされない。
|}

=== loglevel ===

コンソールのログレベルを指定する。

{|class=commandref
!loglevel=''level''
|-
|コンソールのログレベルを指定する。指定した値より小さいレベルの（つまり優先度の高い）メッセージはコンソールに出力され、指定した値以上のレベルのメッセージは出力されない。
コンソールのログレベルは''klogd''プログラムでも変更できるし、''/proc/sys/kernel/printk''ファイルに書きこむことでも変更できる。
利用できるログレベルは：
|-
!0 (KERN_EMERG)
|-
|システムが動作不能
|-
!1 (KERN_ALERT)
|-
|即座に対応を必要とする状況
|-
!2 (KERN_CRIT)
|-
|致命的な状況
|-
!3 (KERN_ERR)
|-
|致命的でないエラー
|-
!4 (KERN_WARNING)
|-
|対策が必要な警告
|-
!5 (KERN_NOTICE)
|-
|問題ではないが気を留めるべき状況
|-
!6 (KERN_INFO)
|-
|対策を必要としないメッセージ
|-
!7 (KERN_DEBUG)
|-
|デバッグメッセージ。ビルド時にデバッグオプションがONの時のみ。
|}

=== log_buf_len ===

カーネルログバッファの大きさを指定。

{|class=commandref
!log_buf_len=''n''[KMG]
|-
|カーネルの内部ログバッファの大きさを指定する。''n''は2のべき乗で指定。2のべき乗でないときは2のべき乗へ切り上げられる。このオプションはカーネルの''CONFIG_LOG_BUF_SHIFT''コンフィギュレーションでも指定できる。
|}

=== initcall_debug ===

initcall関数をデバッグする。

カーネルのブート時に呼ばれる全ての関数をトレースする。ブート時にカーネルが落ちる場合、具体的にどこで落ちているのかを確認するのに便利。

=== kstack ===

Oopsダンプ時にスタックから何ワード出力するかを指定。

{|class=commandref
!kstack=''n''
|-
|カーネルのOopsダンプ時にスタックから何ワード出力するかを指定する。''n''は整数。
|}

=== time ===

カーネルログの全メッセージに時刻を付与する。


== 割り込みのオプション ==

割り込みはカーネルの挙動の中でも複雑なものの一つです。ブート時のオプションは、だいたい、カーネルと割り込みをするハードウェア(
IntelチップのAdvanced Programmable Interrupt Controller/APICなど）とのインタフェースに関わるものです。

=== apic ===

APICサブシステムの出力を制御する。

{|class=commandref
!apic=[quiet|verbose|debug]
|-
|APICサブシステムがブート時にどれだけの情報を出力するかを指定する。デフォルトは''quiet''。
|}


=== noapic ===

IOAPICを利用しない。

カーネルが存在するIOAPICを利用するのを阻止する。

=== lapic ===

ローカルAPICを有効にする。

BIOSで向こうになっていてもローカルAPICを利用する。

=== nolapic ===

ローカルAPICを利用しない。

=== noirqbalance ===

IRQバランスのロジックを全て無効にする。

=== irqfixup ===

割り込み問題の基本的なFix。

割り込みが処理されなかった時、全ての割り込みハンドラを調査する。ひどく動作不良なファームウェアがあってもシステムを動作させるためのオプション。

=== irqpoll ===

割り込み問題の少し発展したFix。

割り込みが処理されなかった時、全ての割り込みハンドラを調査した上で、タイマー割り込みごとにまた調査する。ひどく動作不良なファームウェアがあってもシステムを動作させるためのオプション。


=== noirqdebug ===

未処理割り込みの判定を無効にする。

デフォルトでは、カーネルは処理されない割り込みを判定し、そのソースを無効にしようとする。これは、放置するとカーネルの他の動作に影響を及ぼすからである。このオプションはこのロジックを無効にする。


== メモリのオプション ==

カーネルは様々なカテゴリや塊でメモリを扱います。これらのオプションはそれらの大きさ等を変更します。

=== highmem ===

highmemの大きさを指定する。

{|class=commandref
!highmem=''n''
|-
|highmem領域のサイズをちょうど''n''バイトにする。デフォルトではhighmem領域を持たないマシンでも利用できる。大きすぎるhighmem領域を縮小することもできる。
|}

=== hugepages ===

hugetlbページの数を指定する。

{|class=commandref
!hugepages=''n''
|-
|hugetlbではLinuxで4MBのページを利用できるようになる。これは通常の1000倍の大きさである。このオプションはhugetlb利用時のページ数を''n''に設定する。
|}

=== ihash_entries ===

inodeハッシュバケットの数を指定する。

{|class=commandref
!ihash_entries=''n''
|-
|カーネルのinodeキャッシュで使われるハッシュバケットの数を指定する。上級者向け。
|}


=== max_addr ===

メモリの領域を無視する。

{|class=commandref
!max_addr=''n''
|-
|物理アドレス''n''以上の物理メモリを無視させる。
|}


=== mem ===

メモリ使用量を強制する。

{|class=commandref
!mem=''n''[KMG]
|-
|カーネルが利用するメモリの量を指定する。''memmap=''オプションと併用することで物理アドレススペースの衝突を防止できる。''memmap=''オプションを不使用の場合、PCIデバイスを未使用RAMの領域に割り当てられる。''n''は強制するメモリ使用量で、キロバイト(K)、メガバイト(M)あるいはギガバイト(G)を共に指定する。
|}

=== mem ===

4MBページを無効にする。

{|class=commandref
!mem=nopentium
|-
|4MBの大容量ページの使用を無効にする。
|}

=== memmap ===

正確なE820メモリマップを有効にする。

{|class=commandref
!memmap=''exactmap''
|-
|指定したメモリマップを使用する。''exactmap''はBIOSからの出力などを利用して指定する。
|}

=== memmap ===

使用すべきメモリ領域を指定する。

{|class=commandref
!memmap=''n''[KMG]@''start''[KMG]
|-
|カーネルに特定のメモリ領域の使用を強制する。''n''は領域のサイズ、''start''は開始位置。単位はキロバイト(K)、メガバイト(M)またはギガバイト(G)。
|}

=== noexec ===

実行不可マップを有効/無効にする。

{|class=commandref
!noexec=[on|off]
|-
|メモリの一部を実行不可とマークするカーネルの機能を有効化または無効化する。デフォルトでON。
|}

=== reserve ===

I/Oメモリを予約する。

{|class=commandref
!reserve=''n''[KMG]
|-
|I/Oメモリの一部を無視させる。
|}

=== vmalloc ===

vlmalloc領域の大きさを指定する。

{|class=commandref
!vmalloc=''n''[KMG]
|-
|''vmalloc''のサイズをちょうど''n''に設定する。''vmalloc''の最小サイズ（x86プロセッサでは128MB）を拡大することもできるし、縮小して直接マップされるRAMに領域を多く残してもよい。
|}

=== norandmaps ===

アドレスをランダムマッピングしない。

デフォルトでは、カーネルはプログラムのアドレス空間をランダム化する。このオプションで無効化できる。''/proc/sys/kernel/randomize_va_space''に0を書き込むのと同じ。


=== vdso ===
VDSOマッピングを有効化/無効化する。

{|class=commandref
!vdso=[0|1]
|-
|VDSO (Virtual Dynamic Shared Object) マッピングを有効化(1)あるいは無効化(2)する。デフォルトでON。
|}


== サスペンドのオプション ==

これらのオプションでサスペンドの挙動を変更できます。

=== resume ===

サスペンドイメージが格納されたパーティションを指定する。

{|class=commandref
!resume=''suspend_device''
|-
|どのディスクがサスペンドされたカーネルイメージを格納しているかを伝える。有効なイメージが見つかればメモリ上にロードされ、通常のブートの代わりにこれをレジュームする。''suspend_device''はカーネルのデバイス名で、ユーザスペースでの呼称と違う場合があるので注意。
|}

=== noresume ===

レジュームしない。

レジューム機能をオフにする。サスペンド時にイメージを格納したスワップパーティションは全て空のスワップ領域に戻される。


== CPUのオプション ==

これらのオプションでCPUのタイミングやマルチプロセッシングの挙動を変更できます。

=== cachesize ===

二次キャッシュの大きさを指定する。

{|class=commandref
!cachesize=''n''
|-
|CPUのハードウェアバグによって間違ったキャッシュサイズが報告されることがある。カーネルは既知のCPUについては修正を試みるが、CPUの種類によっては修正できないことがある。このオプションでキャッシュサイズを指定できる。''n''はバイト。
|}

=== lpj ===

ジフィ毎のループ数を指定する。

{|class=commandref
!lpj=''n''
|-
|カーネルが使うべきジフィ毎のループ数を指定する。起動時に自動判定しようとすると時間がかかるので、分かっている場合は指定しておくことでブート時間を短縮できる。''n''を0にすると通常通り自動判定する。
{{LKN/Trap|SMPシステムでは全CPUにこの値が適用されるので、CPUごとに別の値が必要な場合はトラブルの元となる。誤った値を設定すると不正な遅延が発生し、予測不能なI/Oエラーなどの原因となる。稀にハードウェアの破損を招くこともあるので注意。
}}
|}

=== nmi_watchdog ===

NMI Watchdogの値を指定する。

{|class=commandref
!nmi_watchdog=[0|1|2|3]
|-
|デフォルトのNMI Watchdogをオーバーライドするデバッグ用オプション。0はNMI Watchdogを使用しない。1はAPICがあれば使用する。2はローカルAPICがあれば使用する。3はNMI Watchdogが不正なので使用しない。
|}

=== no387 ===

常に387エミュレーションライブラリを使用する。

=== nofxsr ===

x86浮動小数点のセーブ/リストアを無効にする。

x86浮動小数点拡張レジスタのセーブとリストアを無効にする。カーネルはタスク切り替え時にレガシー浮動小数点レジスタのみセーブするようになる。

=== no-hlt ===

HLT命令を使用しない。

HLT命令が正常に動作しない一部のx86プロセッサ向けのオプション。

=== mce ===

MCE (Machine Check Exception)機能を有効にする。

プロセッサの中にはマシンエラー（通常はハードウェアのエラー）をチェックできるものがある。このサブシステムがカーネルに組み込まれている場合、有効にする。

=== nomce ===

MCE (Machine Check Exception)機能をオフにする。

=== nosep ===

x86 SYSENTER/SYSEXITサポートを無効にする。

x86のSYSENTER/SYSEXITサポートを無効にする。この結果システムコールの一部はより時間がかかるようになることがある。

=== nosmp ===

シングルプロセッサとして動作させる。

マシンがマルチプロセッサであってもシングルプロセッサとして動作させる。

=== notsc ===

スタンプカウンタを無効にする。

システムにタイムスタンプカウンタのハードウェアがあれば、無効にする。

=== max_cpus ===

使用するCPUの最大数を指定する。

{|class=commandref
!max_cpus=''n''
|-
|SMPのカーネルが使うべき最大CPU数を指定する。
|}


== スケジューラのオプション ==

スケジューリングのロジックに関わるオプションです。ほとんどのオプションはLinuxにおけるスケジューリングの動作についての詳しい知識を必要とします。

=== isolcpus ===

CPUをカーネルのスケジューラから除外する。

{|class=commandref
!isolcpus=''cpu_number''[,''cpu_number,...'']
|-
|''cpu_number''で指定したCPUをカーネルのSMPバランス及びスケジューラアルゴリズムから除外する。除外したCPUにプロセスを割り当てる方法は、プロセッサ親和性システムコールだけになる。''cpu_number''は0から始まり、CPU数-1まで指定できる。
CPUを除外するには全タスクのCPUマスクを手動で指定するという方法もあるが、ロードバランサのパフォーマンスに悪影響を及ぼすためこのオプションを使うほうがいい。
|}


=== migration_cost ===

スケジューラのマイグレーションコストをオーバーライドする。

{|class=commandref
!migration_cost=''level-1-useconds''[,''level-2-useconds...'']
|-
|デバッグ用オプション。スケジューラのマイグレーションコスト表をオーバーライドする。''level-N-useconds''はCPUドメイン距離としてインデックスされ、単位はマイクロ秒。
例として、SMT NUMAマシンに''migration_cost=1000,2000,3000''を設定すると、コア内のマイグレーションに1ms、コア間のマイグレーションに2ms、ノード間のマイグレーションに3msのコストが設定される。
{{LKN/Trap| 誤った値を指定するとパフォーマンス低下につながるため、スケジューラの開発にのみ使用すべきオプション。}}
|}


=== migration_debug ===

マイグレーションコスト判定のログレベル。

{|class=commandref
!migration_debug=[0|1|2]
|-
|マイグレーションコスト判定のログレベル。0だと何も出力されない（デフォルト）。1だと表の判定に関する情報が少し出力される。2だと多くの情報が出力される。カーネルログバッファをいっぱいにしてしまう量なので、実用的なのはシリアルコンソールを使っている時だけ。
|}


=== migration_factor ===

マイグレーションコストを割り引く、あるいは増加させる

{|class=commandref
!migration_factor=''percent''
|-
|マイグレーションコストを''percent''%だけ変化させる。マイグレーション表の全エントリに適用されるデバッグ用オプション。たとえば''migration_factor=150''ならば全てのマイグレーションコストが50%増加させられ、スケジューラはマイグレーションを起こしにくくなる。''migration_factor=80''だと20%減少するため、マイグレーションが起きやすくなる。
{{LKN/Trap| 誤った値を指定するとパフォーマンス低下につながるため、スケジューラの開発にのみ使用すべきオプション。}}
|}


== RAMディスクのオプション ==

メモリの領域をディスクとして扱うRAMディスクを制御するオプションです。

=== initrd ===

初期RAMディスクの場所を指定する。

{|class=commandref
!initrd=''filename''
|-
|カーネルのブート用の初期RAMディスクの一を指定する。
|}

=== load_ramdisk ===

カーネルのRAMディスクをフロッピーから読み込む。

{|class=commandref
!load_ramdisk=''n''
|-
|''n''を1にセットすると、カーネルのブート時にRAMディスクがフロッピードライブから読み込まれる。
|}

=== noinitrd ===

initrdを使用しない。

他のオプションでinitrdが指定されていてもそれを使用しない。

=== prompt_ramdisk ===

RAMディスクの一覧を表示し選択する。

{|class=commandref
!prompt_ramdisk=1
|-
|フロッピーから初期RAMディスクを読み込む前に選択肢を表示し、ユーザの選択を待つ。
|}

=== ramdisk_blocksize ===

RAMディスクのブロックサイズ。

{|class=commandref
!ramdisk_blocksize=''n''
|-
|RAMディスクドライバにブロックごとのバイト数を指定する。デフォルトは1024。
|}

=== ramdisk_size ===

RAMディスクの大きさ。

{|class=commandref
!ramdisk_size=''n''
|-
|初期RAMディスクの大きさをキロバイト単位で指定する。デフォルトは4096 (4MB)。従来の''ramdisk''オプション代わりにこちらを使うべき。
|}


== Rootディスクのオプション ==

rootファイルシステムの扱いに関するオプション。

=== ro ===

rootデバイスを読み込み専用でマウントする。

カーネルはデフォルトでrootデバイスを読み込み専用でマウントするが、このオプションはこの挙動を強制する。rwコマンドラインオプションが指定されていても読み込み専用となる。

=== root ===

rootファイルシステムを指定する。

{|class=commandref
!root=''device''
|-
|カーネルにrootファイルシステムイメージを格納したディスクデバイスを伝える。''device''は以下のいずれか。
|-
!nnnn
|-
|16進数のデバイス番号。カーネルの内部表現に従う。カーネルの内部にアクセスできるとき以外はおすすめできない指定方法。
|-
!/dev/nfs
|-
|''nfsroot''オプションで指定したNFSディスクを使う。
|-
!/dev/''<diskname>''
|-
|カーネルディスク名''<diskname>''で指定したディスクを使う。
|-
!/dev/''<diskname><decimal>''
|-
|カーネルディスク名''<diskname>''とパーティション''<decimal>''で指定したディスクを使う。
|-
!/dev/''<diskname>''p''<decimal>''
|-
|上記と同じだが、''<diskname>''が数字で終わるときはこちらの書式を使う。
|}


=== rootdelay ===

rootファイルシステムのマウントを試みる前に待つべき時間。

{|class=commandref
!rootdelay=''n''
|-
|rootファイルシステムのマウントを試みる前に''n''秒、待機する。rootファイルシステムがUSBやFireWireデバイスで、カーネルによって発見されるのに時間がかかる場合に有効。
|}

=== rootflags ===

rootファイルシステムのマウントオプション。

{|class=commandref
!rootflags=''options''
|-
|rootファイルシステムのマウント時に使用するオプション。''options''はファイルシステムによって変わるので、個別のドキュメンテーションを参照。
|}

=== rootfstype ===

rootファイルシステムの種類。

{|class=commandref
!rootfstype=''type''
|-
|rootファイルシステムをこの種類としてマウントを試みる。例えば''rotfstype=ext3''など。
|}

=== rw ===

rootファイルシステムを読み込み/書き込みモードでマウントする。

デフォルトでは読み込み専用だが、読み込み/書き込みでマウントする。


== initのオプション ==

Initプロセスはカーネルが起動するとき最初に開始されるプロセスで、他のすべてのプロセスの先祖となります。ここのオプションではどのプログラムをどう走らせるかを制御できます。

=== init ===

init時に走らせるプログラム。

{|class=commandref
!init=''filename''
|-
|指定したバイナリをinitプロセスとして走らせる。デフォルトは''/sbin/init''。
|}

=== rdinit ===

initプロセスをRAMディスクから走らせる。

{|class=commandref
!rdinit=''full_path_name''
|-
|''full_path_name''で指定したバイナリをinitプロセスとして走らせる。このファイルはrootファイルシステムではなくRAMディスクになければいけない。
|}

=== S ===

initをシングルユーザモードで走らせる。

デフォルトではinitはマルチユーザモードで動作するが、このオプションを指定すればシングルユーザモードで動作する。


== kexecのオプション ==

kexecは再起動に特化した機能で、高速リブートを可能にする。通常、以前のカーネルを解析のためにダンプするkdumpと共に使われます。これらのオプションではkexecの挙動を調整できます。

=== crashkernel ===

物理メモリの一部をkexec用に確保する。

{|class=commandref
!crashkernel=''n''[KMG]@''start''[KMG]
|-
|物理メモリの一部をkexecのために予約しておく。カーネルパニック時にはkexecがこの領域を使用する。''n''は確保するサイズ、''start''は領域の開始位置。ともにキロバイト(K)、メガバイト(M)あるいはギガバイト(G)と共に指定する。
|}

=== elfcorehdr ===

カーネルコアイメージのELFヘッダ開始位置。

{|class=commandref
!elfcorehdr=''n''
|-
|カーネルは、他のLinux実行ファイルと同じようにELF形式になっている。このオプションではカーネルコアのELFヘッダ開始位置をしていする。この値はkexecによってセカンダリカーネルが起動されるとき、カーネルを見つけるのに使われる。
|}


== RCUのオプション ==

RCU (Read Copy Update)はカーネルがサブシステムの専有をロックなしで扱う機能です。以下はRCUの挙動を調整するオプションです。

=== rcu.blimit ===

RCUバッチリミット。

{|class=commandref
!rcu.blimit=''n''
|-
|1バッチで処理すうるRCUコールバックの最大数を指定する。
|}

=== rcu.qhimark ===

RCUキューのハイレベル。

{|class=commandref
!rcu.qhimark=''n''
|-
|キューに入っているRCUコールバック数が''n''より上になるとバッチリミットを解除する。
|}

=== rcu.qlowmark ===

RCUキューのローレベル。

{|class=commandref
!rcu.qlowmark=''n''
|-
|キューに入っているRCUコールバックス数が''n''未満になるとバッチリミットが再度有効化される。
|}

=== rcu.rsinterval ===

RCUコールバックのキューの長さ。

{|class=commandref
!rcu.rsinterval=''n''
|-
|全CPUにリスケジュールを強制する際にキューに入っているべきRCUコールバックの数を指定する。
|}


== ACPIのオプション ==

これらのオプションはACPI (Advanced Configuration and Power Interface) の挙動を調整します。

=== acpi ===

ACPIのオプション。

{|class=commandref
!acpi=[force|off|noirq|ht|strict]
|-
|ACPIのメインオプション。
|-
!force
|-
|ACPIを強制的に有効化する。カーネルコンフィギュレーションで無効化されていてもオーバーライドする。
|-
!off
|ACPIを強制的に無効化する。カーネルコンフィギュレーションで有効化されていてもオーバーライドする。
|-
!noirq
|-
|ACPIがIRQルーティングに使われるのを防ぐ。
|-
!ht
|-
|HyperThreadingが使えるのに十分なだけのACPIレイヤーを動作させる。
|-
!strict
|-
|ACPIの仕様に完全には従っていないプラットフォームに対して寛容に動作させる。
|}

=== acpi_sleep ===

ACPIのスリープのオプション。

{|class=commandref
!acpi_sleep=[s3_bios],[s3_mode]
|-
|S3レジューム時（マシンがRAMへサスペンドされていた時に起こる）、ハードウェアは正常に初期化される必要がある。大半のデバイスはBIOSによって初期化されるので処理はシンプルだが、ビデオカードは例外となる。カーネルはビデオデバイスをリストアするのに十分な情報を持ち合わせていない。このオプションを使うとカーネルがACPIを使ってビデオカードのリストアを2つの方法で試みる。
詳しくは''Documentation/power/video.txt''を参照。
|}

=== acpi_sci ===

ACPIのシステムコントロール割り込みのトリガーモード。

{|class=commandref
!acpi_sci=[level|edge|high|low]
|-
|ACPIのシステムコントロール割り込みのトリガーモードを切り替える。
|}

=== acpi_irq_balance ===

ACPIのIRQバランスを有効化する。

APICモードで動作中はデフォルト。

=== acpi_irq_nobalanace ===

ACPIのIRQバランスを無効化する。

PICモードで動作中はデフォルト。

=== acpi_irq_isa ===

ISAに使われているIRQをマークする。

{|class=commandref
!acpi_irq_isa=''irq''[,''irq...'']
|-
|IRQバランスが有効なとき、これらのIRQをISAによって使用されているとマークする。
|}

=== acpi_irq_pci ===

PCIに使われているIRQをマークする。

{|class=commandref
!acpi_irq_pci=''irq''[,''irq...'']
|-
|IRQバランスが有効なとき、これらのIRQをPCIによって使用されているとマークする。
|}

=== acpi_os_name ===

偽りのOS名をACPIに伝える。

{|class=commandref
!acpi_os_name=''name''
|-
|ACPI BIOSに対して、動作中のOSは''name''だと報告する。LinuxではなくWindowsが動作中だと虚偽申告したりでき、古いBIOSのACPIの問題を解決するのに便利な時がある。たとえば''Microsoft 2001''とすればBIOSはWindows 2001が動作中だと勘違いする。
|}

=== acpi_serialize ===

AML (ACPI Machine Language)のメソッドのシリアライズを強制する。

=== acpi_skip_timer_override ===

割り込みオーバーライドの問題をスキップする。

動作不良のnForce2 BIOSではXT-PICタイマーがおかしな挙動を起こすが、ACPIにIRQ0/pin2の割り込みの問題を認識させ、無視させる。

=== acpi_dbg_layer ===

ACPIデバッグレイヤー。

{|class=commandref
!acpi_dbg_layer=''n''
|-
|ACPIデバッグレイヤーを指定する。''n''は整数で、各ビットが別々のACPIデバッグレイヤを指し示す。システムのブート後は''/proc/acpi/debug_layer''ファイルで設定できる。
|}

=== acpi_fake_ecdt ===

ECDTの問題を回避する。

BIOSにEmbedded Controller Description Tableがないときの問題を回避する。

=== acpi_generic_hotkey ===

汎用ACPIホットキードライバを使用する。

プラットフォーム固有のホットキードライバの代わりにACPIの汎用ドライバを使用する。

=== acpi_pm_good ===

マシンのpmtimerが必ず適正な値を返す事を前提とした動作をさせる。

=== ec_intr ===

ACPI Embedded Controllerの割り込みモード。

{|class=commandref
!ec_intr=''n''
|-
|ACPI Embedded Controllerの割り込みモードを指定する。''n''が0ならポーリング、そうでなければ割り込みモードとなる。デフォルトは割り込みモード。
|}

=== memmap ===

特定のメモリ領域をACPIデータとして使う。

{|class=commandref
!memmap=''n''[KMG]#''start''[KMG]
|-
|メモリの特定の領域をACPIデータとして指定する。''n''は領域のサイズ、''start''は開始位置。共にキロバイト(K)、メガバイト(M)あるいはギガバイト(G)を指定する。
|}

=== memmap ===

メモリの領域を予約する。

{|class=commandref
!memmap=''n''[KMG]$''start''[KMG]
|-
|メモリの特定の領域を予約する。''n''は領域のサイズ、''start''は開始位置。共にキロバイト(K)、メガバイト(M)あるいはギガバイト(G)を指定する。
|}

=== pnpacpi ===

Plug and Play ACPIを無効にする。

{|class=commandref
!pnpacpi=off
|-
|Plug and Play ACPIを無効にする。
|}

=== processor.max_cstate ===

プロセッサの最大C-stateを指定する。

{|class=commandref
!processor.max_cstate=''n''
|-
|ACPIテーブルの値にかかわらずプロセッサの最大C-stateを指定する。''n''は有効なC-state値。9に設定するとDMIブラックリストの制限をオーバーライドする。
|}

=== processor.nocst ===

_CSTメソッドを無視する。

ACPIコアにプロセッサのC-stateを判断するための_CSTメソッドを無視させる。代わりに従来のFADTメソッドが使用される。


== SCSIのオプション ==



== PCIのオプション ==

== Plug and PlayのBIOSオプション ==

== SELinuxのオプション ==

== ネットワークのオプション ==

== ネットワークファイルシステムのオプション ==

== ハードウェア固有のオプション ==

== タイマー固有のオプション ==

== その他のオプション ==







<references/>


{{Nav
|prev=LKN/Chapter8
|next=LKN/Chapter10
}}
