<!-- vim: set noexpandtab shiftwidth=4 wrap linebreak filetype=mediawiki: -->
{{#set: title=第10章: ビルドコマンドラインリファレンス}}
{{Nav
|prev=LKN/Chapter9
|next=LKN/Chapter11
}}

= 第10章: ビルドコマンドラインリファレンス =

{{Link|LKN/Chapter4}}で述べたように、カーネルのビルドを司るのは''make''プログラムで、これにターゲットを指定することで特定のビルド作業を行います。{{Link|LKN/Chapter4}}では基本的なターゲットだけ紹介しましたが、実は他にも様々なターゲットが用意されています。本章ではそれらについて解説します。

ターゲットは全て、''make''にたいしてコマンドラインオプションとして指定します。いくつかは同時に指定することもできます：
 $ '''make mrproper xconfig'''
以下では、ターゲットをいくつかに分類して紹介しています。

ビルドディレクトリで
 $ '''make help'''
とすることでこれらのヘルプを見ることができます。

== 情報収集 ==

次のターゲットはカーネルのバージョンを出力します。主にスクリプトから利用されます。

{|class=commandref
!kernelrelease
|カーネルのバージョンを出力する。ビルドシステムによって判定された値。
|-
!kernelversion
|カーネルのバージョンを出力する。Makefileに記述された値。この値は''kernelrelease''と違い、''localversion''ファイルの内容やコンフィグオプションに左右されない。
|}

== クリーンする ==

次のターゲットを使うと以前のビルドで作られたファイルを削除します。新しいビルドをはじめるときにはこれらのターゲットで一旦ビルドを綺麗にするのがおすすめです。これらのターゲットの違いはどれだけの範囲で削除するかです。

{|class=commandref
!clean
|ビルドで生成されたほとんどのファイルを削除するが、コンフィギュレーションは残す。
|-
!mrproper
|コンフィギュレーションやバックアップファイルを含め全てのビルド生成ファイルを削除する。
|-
!distclean
|''mrproper''に加え、エディタのバックアップやパッチの残りカスも削除する。
|}


== コンフィグする ==

これらのターゲットはカーネルをコンフィグするのに使います。

{|class=commandref
!config
|行ベースのプログラムでコンフィグを更新する。
|-
!menuconfig
|CUIのメニュー式プログラムでコンフィグを更新する。
|-
!xconfig
|QTベースのGUIプログラムでコンフィグを更新する。
|-
!gconfig
|GTK+ベースのGUIプログラムでコンフィグを更新する。
|-
!oldconfig
|現在の''.config''ファイルを使い、最新バージョンで追加されたオプションだけ質問する形式でコンフィグを更新する。
|-
!silentoldconfig
|''oldconfig''と同じだが、質問しない。
|-
!randconfig
|全てのオプションをランダムに設定したコンフィグを作成する。
|-
!defconfig
|全てのオプションをデフォルト値に設定したコンフィグを作成する。デフォルト値は''ach/$ARCH/defconfig''ファイルから取られる。$ARCHはアーキテクチャ。
|-
!allmodconfig
|可能な限りモジュールを有効にしたコンフィグを作成する。
|-
!allyesconfig
|全てのオプションをyesにしたコンフィグを作成する。
|-
!allnoconfig
|全てのオプションをnoにしたコンフィグを作成する。
|-
|}

''allyesconfig'', ''allmodconfig'', ''allnoconfig'', そして ''randconfig'' は環境変数''KCONFIG_ALLCONFIG''も参照します。この環境変数がファイルを指していたら、このファイルの内容が''make''ターゲットによって指定される内容をオーバーライドします。

例えば、''~/linux/must_be_set''ファイルが以下の内容だったとします。
 $ '''cat &tilde;/linux/must_be_set'''
 CONFIG_SWAP=y
 CONFIG_DEBUG_FS=y
ここで''KCONFIG_ALLCONFIG''を設定した上で''make allnoconfig''を実行すると：
 $ '''KCONFIG_ALLCONFIG=../must_be_set make allnoconfig'''
 $ '''grep CONFIG_SWAP .config'''
 CONFIG_SWAP=y
 $ '''grep CONFIG_DEBUG_FS .config'''
 CONFIG_DEBUG_FS=y
となります。

''KCONFIG_ALLCONFIG''がセットされていない場合、ビルドシステムはビルドディレクトリの最上位にて以下のファイルを探します。

* ''allmod.config''
* ''allno.config''
* ''allrandom.config''
* ''allyes.config''

これらのうちどれかが存在すれば、それをオーバーライド用の設定リストとして使用します。これらがどれも存在しなければ、''all.config''というファイルを探して利用します。

これらのファイルを使えば常にうまくいくと分かっている基本コンフィグのセットを定義しておくことができます。その上で他のコンフィグ値を変更して実験すればいいわけです。


== ビルドする ==

以下のターゲットは実際のビルドを行います。


{|class=commandref
!all
|カーネルを使用するために必要な全てのターゲットをビルドする。これにはモジュールと静的な部分が含まれる。
|-
!vmlinux
|カーネルの静的な部分だけをビルドする（モジュールはビルドしない）
|-
!modules
|モジュールだけをビルドする。
|-
!modules_install
|モジュールを指定した場所へインストールする。''INSTALL_MODULE_PATH''環境変数で場所が指定されていない場合は、ルートディレクトリへインストールされる。
|-
!dir/
|指定したディレクトリ以下のみビルドする。
|-
!<nowiki>dir/file.[o|i|s]</nowiki>
|指定したファイルのみビルドする。
|-
!dir/file.ko
|指定したモジュールに必要なファイルのみビルドし、リンクする。
|-
!tags
|ソースコードを編集するときにエディタで利用するタグをビルドする。
|-
!TAGS
|上に同じ。
|-
!csope
|コンフィグで指定されたアーキテクチャに対応する部分のcscopeイメージをビルドする。
|-
|}

また、以下の環境変数を指定するとビルドの挙動が変わります。

{|class=commandref
!変数
!値
!説明
|-
!V
!0
|出力を静かにする。現在ビルドしているファイルだけ表示し、そのためのコマンド全体は表示しない。デフォルト値。
|-
!V
!1
|うるさい出力をする。実行中のコマンド全文を出力する。
|-
!O
!dir
|出力ファイルを全て（コンフィグも含め）''dir''ディレクトリに置く。カーネルソースを読み取り専用のディレクトリやファイルシステムに置いている場合に便利。
|-
!C
!1
|ビルドされるCファイルを全て''sparse''ツールでチェックし、よくあるプログラミングエラーを検出する。''sparse''は''git://git.kernel.org/pub/scm/devel/sparse/sparse.git''からチェックアウトできる。Nightlyスナップショットは''http://www.codemonkey.org.uk/projects/git-snapshots/sparse/''から入手できる。''sparse''についてより詳しくは''Documentation/sparse.txt''を参照。
|-
!C
!2
|ビルドしないものも含め、全てのCファイルを''sparse''でチェックする。
|}

== パッケージする ==

以下のターゲットではビルドしたカーネルをスタンドアローンのパッケージにできます。

{|class=commandref
!rpm
|カーネルをビルドし、インストール可能なRPMパッケージを作成する。
|-
!rpm-pkg
|ソースRPMパッケージを作成する。
|-
!binrpm-pkg
|コンパイル済みのカーネルとモジュールを含んだRPMパッケージを作成する。
|-
!deb-pkg
|コンパイル済みのカーネルとモジュールを含んだDebianパッケージを作成する。
|-
!tar-pkg
|コンパイル済みのカーネルとモジュールを含んだtarballを作成する。
|-
!targz-pkg
|コンパイル済みのカーネルとモジュールを含んだgzip圧縮tarballを作成する。
|-
!tarbz2-pkg
|コンパイル済みのカーネルとモジュールを含んだbzip2圧縮tarballを作成する。
|}


== ドキュメントする ==

以下のターゲットではドキュメンテーションを生成できます。

{|class=commandref
!xmldocs
|カーネルドキュメンテーションをXML Docbook形式で生成する。
|-
!psdocs
|カーネルドキュメンテーションをPostScript形式で生成する。
|-
!pdfdocs
|カーネルドキュメンテーションをPDF形式で生成する。
|-
!htmldocs
|カーネルドキュメンテーションをHTML形式で生成する。
|-
!mandocs
|カーネルドキュメンテーションをmanpage形式で生成する。生成したmanpageは''install-mandocs''ターゲットでインストールできる。
|}


== アーキテクチャ固有のターゲット ==

それぞれのカーネルアーキテクチャには固有のビルドターゲットがあります。以下は32-bit Intelのターゲットです。

{|class=commandref
!bzImage
|圧縮されたカーネルイメージを生成し、''/arch/i386/boot/bzImage''ファイルに置く。i386カーネルビルド時のデフォルト。
|-
!install
|ディストリビューションごとの''/sbin/installkernel''プログラムを使ってカーネルをインストールする。モジュールはインストールされないので注意。モジュールのインストールには''modules_install''ターゲットを使う。
|-
!bzdisk
|ブートフロッピーイメージを作成し''/dev/fd0''デバイスに書き込む。
|-
!fdimage
|ブートフロッピーイメージを作成し''arch/i386/boot/fdimage''に置く。''mtools''パッケージが必要。
|-
!isoimage
|CD-ROMブートイメージを作成し''arch/i386/boot/image.iso''に置く。''syslinux''パッケージが必要。
|}


== 解析する ==

以下のターゲットはカーネルのソースコードに潜む問題を発見するのに役立ちます。スタックスペースリストはコードの変更がカーネルのスタックスペースを使いすぎていないか確認するのに便利です。ネームスペースチェックはコードの変更が既存のネームスペースと衝突しないか確認できます。

{|class=commandref
!checkstack
|カーネルスタックスペースを最も使用している関数をリストアップする。
|-
!namespacecheck
|カーネルのシンボルとそれらのネームスペースの一覧を出力する。非常に大きなリストになる。
|}

<references/>


{{Nav
|prev=LKN/Chapter9
|next=LKN/Chapter11
}}
