<!-- vim: set noexpandtab shiftwidth=4 wrap linebreak filetype=mediawiki: -->
{{#set: title=第7章: カーネルのカスタマイズ}}
{{Nav
|prev=LKN/Chapter6
|next=LKN/Chapter8
}}

= 第7章: カーネルのカスタマイズ =

カーネルをビルドする中で、どのドライバやオプションが必要でどれが不要なのかを判断するのは最も難しい作業の一つです。この章では正しいドライバを見つける手順について説明します。

== ディストリビューションカーネルを使用する ==

どのモジュールが必要かを判断する簡単な方法の一つは、ディストリビューションに付属のカーネルパッケージを調べることです。起動中、動作中のシステムでは既に適切なドライバがハードウェア構成に従って組み込まれているので、判断が楽になります。

カーネルのビルド対象マシンにまだLinuxディストリビューションがインストールされていないなら、LiveCD版を使うのをお勧めします。LiveCD版を起動すればハードウェア構成に合わせたドライバの判別ができます。

=== コンフィギュレーションファイルはどこ？ ===

ほとんどのディストリビューションは、カーネルパッケージにコンフィギュレーションファイルを同梱しています。コンフィグファイルの場所についてはディストリビューションごとのドキュメントを参照してください。通常は''/usr/src/linux/''ディレクトリ配下にあります。

コンフィグファイルが見つからないときは、カーネル自体を見てみてください。ほとんどのディストリビューションカーネルはコンフィグファイルを''/proc''に置くようビルドされています。これを確認するには：

 $ '''ls /proc/config.gz'''
 /proc/config.gz

このファイルが存在するなら、あなたのカーネルソースディレクトリにコピーして展開しましょう。

 $ '''cp /proc/config.gz &tilde;/linux/'''
 $ '''cd &tilde;/linux'''
 $ '''gzip -dv config.gz'''
 config.gz:       74.9% -- replaced with config

このコンフィグファイルを使えばとりあえず正常に動作するカーネルイメージを作ることができますが、欠点として、ソースツリーに存在するほぼ全てのモジュールやドライバをビルドしてしまう点が挙げられます。一台のマシンではそんなに大量のモジュールは必要としません。ですので、不要なオプションをオフにしていくことをお勧めしますが、確実に不要だと分かるものだけオフにしていくよう注意してください。どこかで依存関係があるものをオフにしてしまうと正常に動作しません。


=== 必要なモジュールを判別する ===

ディストリビューションカーネルから取ったコンフィグファイルを使うと、ビルドに大変長い時間がかかります。これは数々のドライバがいちいちビルドされるからです。必要なものだけに絞れば、ビルド時間が大幅に短縮出来るだけでなく、一部の（場合によっては全ての）ドライバをカーネル自体に組み込んでしまうことができ、メモリを節約できたり、アーキテクチャによっては高速に動作するカーネルを作ることができます。ここではどのハードウェアにどのドライバが必要かを判断する2つの例を紹介します。

動作中のシステムでハードウェアにどのドライバが結びついているかを示す場所がいくつかあります。もっとも重要なのは''sysfs''と呼ばれる仮想ファイルシステムです。''sysfs''は常に''/sys''にマウントされています。''sysfs''からはあちこちへシンボリックリンクが張られ、カーネルのどの部分が他の部分とどう結びついているのかを垣間見ることができます。

以降の例には本物の''sysfs''パスやハードウェアの種別が含まれます。あなたのマシンでは別の値になると思いますが、情報が配置されている相対的な場所は同じです。違う値が表示されるからといって慌ててはいけません。

さらに、''sysfs''の内部構造は頻繁に変更されます。これはカーネル開発者がカーネルの内部構造をユーザスペースに提示するベストな方法を模索し、整理や改変を続けるからです。したがってこの章で紹介するいくつかのシンボリックリンクは最新版では亡くなっているかも知れません。ただ、その場合も情報はなくなったわけではなく、別の場所に移動しただけだと覚えておいてください。

==== 例：ネットワークドライバを判別する ====

NIC（ネットワーク・インタフェース・カード）はシステムの中でも最も重要なハードウェアの一つです。ネットワーキングが正常にできるようにするためにはドライバの判別が必須です。

まず、ネットワーク接続名からPCIデバイスを見つけます。そのためにはまずネットワーク接続名をリストします。

 $ '''ls /sys/class/net/'''
 eth0  eth1  eth2  lo

''lo''ディレクトリはループバックデバイスで、実際のネットワークデバイスとは関係ありません。ここでは''eth1''、''eth1''そして''eth2''ディレクトリが実際のネットワークですので、そこに注目します。

さらにどのNICが大事かを判別するには''ifconfig''を使います。

 $ '''/sbin/ifconfig -a'''
 eth0      Link encap:Ethernet  HWaddr 00:12:3F:65:7D:C2
           inet addr:192.168.0.13  Bcast:192.168.0.255  Mask:255.255.255.0
           UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
           RX packets:2720792 errors:0 dropped:0 overruns:0 frame:0
           TX packets:1815488 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:100
           RX bytes:3103826486 (2960.0 Mb)  TX bytes:371424066 (354.2 Mb)
           Base address:0xdcc0 Memory:dfee0000-dff00000
 eth1      Link encap:UNSPEC  HWaddr 80-65-00-12-7D-C2-3F-00-00-00-00-00-00-
           00-00-00
           BROADCAST MULTICAST  MTU:1500  Metric:1
           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:1000
           RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
 eth2      Link encap:UNSPEC  HWaddr 00-02-3C-04-11-09-D2-BA-00-00-00-00-00-
           00-00-00
           BROADCAST MULTICAST  MTU:1500  Metric:1
           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:1000
           RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
 lo        Link encap:Local Loopback
           inet addr:127.0.0.1  Mask:255.0.0.0
           UP LOOPBACK RUNNING  MTU:16436  Metric:1
           RX packets:60 errors:0 dropped:0 overruns:0 frame:0
           TX packets:60 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:0
           RX bytes:13409 (13.0 Kb)  TX bytes:13409 (13.0 Kb)

この中で、''eth0''が実際に動作中のNICだと分かります。

 eth0      Link encap:Ethernet  HWaddr 00:12:3F:65:7D:C2
           inet addr:192.168.0.13  Bcast:192.168.0.255  Mask:255.255.255.0

この出力が、''eth0''はイーサネットデバイスで、正常なIPアドレスが割り当てられていることを示しているからです。

さて、このeth0が新しいカーネルでも正常に動作するように、これをコントロールしているドライバを見つけます。そのためには、''sysfs''ファイルシステムにある色々なリンクを次のコマンドで調べます。

 $ '''basename &grave;readlink /sys/class/net/eth0/device/driver/module&grave;'''
 e1000

この結果、<code>e1000</code>というモジュールが''eth0''をコントロールしていることが分かりました。この''basename''コマンドは以下のことをしてくれています：

# シンボリックリンク''/sys/class/net/eth0/device''を辿り、''/sys/device''ツリー内で''eth0''のコントローラについての情報がある場所へ行き着きます。新しいバージョンのカーネルでは''/sys/class/net/eth0''ディレクトリ自体がシンボリックリンクになっているかも知れません。
# ''sysfs''内でデバイスについて説明しているこのディレクトリには、このデバイスのドライバへのシンボリックリンクがあります。そのリンクは''driver''という名前なので、それを辿ります。
# ''sysfs''内でドライバについて説明しているこのディレクトリには、このドライバを含むモジュールへのシンボリックリンクがあります。このリンクは''module''という名前です。'7readlink''コマンドでこのリンクの対象パスを取得します。
# 重要なのはモジュールの名前だけですので、不要なパスを切り捨てます。''basename''はそのためのコマンドです。

というわけで、このワンライナーでリンクをいくつか辿り、basenameを取得したことになります。

これでモジュール名が分かりましたので、該当するカーネルコンフィグオプションを探します。メニューを使って探してもいいですし、カーネルのソースコード自体を検索すれば正しいオプションかどうかを確認できます。

 $ '''cd &tilde;/linux/linux-2.6.17.8'''
 $ '''find -type f -name Makefile | xargs grep e1000'''
 ./drivers/net/Makefile:obj-$(CONFIG_E1000) += e1000/
 ./drivers/net/e1000/Makefile:obj-$(CONFIG_E1000) += e1000.o
 ./drivers/net/e1000/Makefile:e1000-objs := e1000_main.o e1000_hw.o e1000_
 ethtool.o e1000_param.o

'''<code>e1000</code>'''をあなたの目的のモジュール名に変えるのを忘れないで下さい。

''find''コマンドの出力では<code>CONFIG_</code>がつく文字列に注目してください。これがカーネルのコンフィグに必要となるオプション名です。ここでは<code>CONFIG_E1000</code>がそれです。

これでカーネルのコンフィグに必要な情報が揃いました。メニューコンフィグツールを起動します。

 $ '''make menuconfig'''

<code>/</code>キーを押すと検索画面が表示されますので、さきほどのオプション名を入力します。<code>CONFIG_</code>の部分は省略します（図7-1）。

[[File:lkn-fig0701.gif|none|frame|図7-1. menuconfigの検索]]

するとどこにこのオプションがあるかが示されます（図7-2）。

[[File:lkn-fig0702.gif|none|frame|図7-2. menuconfigの検索結果]]

この画面では最初の項目が目的のオプションです。<code>E1000</code>モジュールを組み込むにはこのオプションを有効にすべきだと書いてあります。

 Device Drivers
     Network device support
         [*] Network device support
             Ethernet (1000 Mbit)
         [*] Intel(R) PRO/1000 Gigabit Ethernet support

以上の手順はカーネルで動作中のどのデバイスでも有効です。


=== 例：USBデバイス ===

別の例として、USB/シリアルコンバータを見てみましょう。現在''/dev/ttyUSB0''ポートに接続されているとすると、''sysfs''のttyセクションを見てみます。

 $ '''ls /sys/class/tty/ | grep USB'''
 ttyUSB0

前節と同じようにこのデバイスをコントロールしているモジュールを探します。

 $ '''basename `readlink /sys/class/tty/ttyUSB0/device/driver/module`'''
 pl2303

続けてカーネルのソースツリーを検索し、コンフィグオプション名を見つけます。

 $ '''cd &tilde;/linux/linux-2.6.17.8'''
 $ '''find -type f -name Makefile | xargs grep pl2303'''
 ./drivers/usb/serial/Makefile:obj-$(CONFIG_USB_SERIAL_PL2303) += pl2303.o

図7-3のようにコンフィグツールを使い、設定すべきオプションを探します。

[[File:lkn-fig0703.gif|none|frame|図7-3. USB_SERIAL_OL2303を検索]]

すると図7-4のような結果が出ます。

[[File:lkn-fig0704.gif|none|frame|図7-4. USB_SERIAL_OL2303の検索結果]]

これで<code>USB Prolific 2303 Single Port Serial Driver</code>オプションを探し当てることができました。


=== デバイス検索のまとめ ===

既に動作中のデバイスのドライバを検索する手順をまとめると、以下のようになります。

# デバイスが結びついている''sysfs''クラスデバイスを探します。ネットワークデバイスは''/sys/class/net''以下、ttyデバイスは''/sys/class/tty''以下にあります。他の種類のデバイスは''/sys/class''内のその他のディレクトリにあります。
# ''sysfs''ツリーを調べ、このデバイスをコントロールするモジュールを見つけます。''/sys/class/class_name/device_name/device/driver/module''にあるでしょう。''readlink''と''basename''を使ってモジュール名を表示させます。
# ''find''と''grep''を使ってカーネルソース内を検索し、<code>CONFIG_</code>名を見つけます。
# カーネルコンフィグシステムでその設定項目を探し、メニューからそのドライバのビルドを有効にします。


=== 何が必要かをカーネルに聞く ===

''sysfs''を探索してモジュール名を見つける方法を解説しましたが、このスクリプトを使うと同じ作業を（別のやり方で）簡単に行うことができます。

 #!/bin/bash
 #
 # find_all_modules.sh
 #
 for i in &grave;find /sys/ -name modalias -exec cat {} \;&grave;; do
     /sbin/modprobe --config /dev/null --show-depends $i ;
 done | rev | cut -f 1 -d '/' | rev | sort -u

このスクリプトは本書のウェブサイトからダウンロードすることができます。

このスクリプトは''sysfs''内に存在する''modalias''と呼ばれるファイルを全て発見します。''modalias''ファイルにはモジュールエイリアスが含まれ、これによって''modprobe''プログラムがデバイス用のドライバモジュールを見つけることができます。他にもモジュールエイリアスには製造者、デバイスID、クラスタイプなどの識別子が含まれます。

全てのカーネルドライバモジュールは、サポートするデバイスの一覧を内部的に持っています。''modprobe''は、全ドライバの対応デバイスリストをスキャンして目的のエイリアスを探します。一致するものが見つかればそのモジュールをロードします（これがLinuxの自動ドライバロードの仕組みです）。

このスクリプトでは''modprobe''を起動しますが、実際にモジュールをロードする前に停止させ、どのようなアクションをする予定だったかを表示させます。つまり、現在のシステムに存在する全デバイスを動作させるために必要な全モジュールのリストが出力されるわけです。この出力を少し整形しソートすると、このようになります。

 $ '''find_all_modules.sh'''
 8139cp.ko
 8139too.ko
 ehci-hcd.ko
 firmware_class.ko
 i2c-i801.ko
 ieee80211.ko
 ieee80211_crypt.ko
 ipw2200.ko
 mii.ko
 mmc_core.ko
 pcmcia_core.ko
 rsrc_nonstatic.ko
 sdhci.ko
 snd-hda-codec.ko
 snd-hda-intel.ko
 snd-page-alloc.ko
 snd-pcm.ko
 snd-timer.ko
 snd.ko
 soundcore.ko
 uhci-hcd.ko
 usbcore.ko
 yenta_socket.ko

これが、今のマシンに存在する全てのハードウェアを動作させるために必要なモジュールの一覧です。

もしかすると、スクリプトから以下のようなエラーメッセージが出るかも知れません。

 FATAL: Module pci:v00008086d00002592sv000010CFsd000012E2bc03sc00i00 not
 found.
 FATAL: Module serio:ty01pr00id00ex00 not found.

これはそのデバイス用のモジュールが見つからなかったということですが、心配する必要はありません。単にそのデバイス用のカーネルドライバが存在しないというだけのことです。


== 必要なモジュールを自分で探す ==

ディストリビューションカーネルを目的のマシンで動かすことができない場合もあると思います。また、新しいハードウェアを追加する必要があるかもしれません。その場合、上記の方法は使えません。この節ではそういったハードウェアを利用するための手順を解説します。

最も簡単な方法は、同じタイプの全てのドライバをビルドしてしまうことです。すると''udev''スタートアップ・プロセスがドライバをデバイスに紐付けてくれます。その後は上で説明した方法でドライバをそのモジュール、カーネルコンフィグオプションを探し当てることができます。

全部のドライバをビルドしたくない場合や、何らかの理由でうまくいかないときは、もう少し作業が必要になります。以下の手順は複雑で、カーネルのソースコードに度々潜らなければいけませんが、恐れてはいけません。あなたがハードウェアとカーネルをより深く理解する助けになるでしょう。

手順はデバイスの種類によって異なります。ここではもっとも一般的な二種類（PCIとUSB）について解説しますが、他の種類のデバイスでも有効かもしれません。

あと、カーネルがすべてのファイルシステムをきちんと見ることができるようにするのが大切です（特にrootファイルシステム）。これについては後に詳解します。


=== PCIデバイス ===

PCIデバイスは製造元IDとデバイスIDによって識別されます。この2つの組み合わせごとに別のドライバが必要になることもあります。この事実が以下の手順の前提となります。

例として、現在のカーネルバージョンでは動作していないPCIのネットワークカードを想定しましょう。例の中の具体的な文字列や値はあなたの状況にそのまま当てはまらないと思いますが、ドライバを探すのに必要な手順は同じです。

まず、PCIデバイスを探します。全てのPCIデバイスの一覧を取得するには''lspci''を使います。ネットワークカードを探したいので、結果を<code>ethernet</code>という文字列で絞り込みます（case-insensitive）。

 $ '''/usr/sbin/lspci | grep -i ethernet'''
 06:04.0 Ethernet controller: Realtek Semiconductor Co., Ltd.  RTL-8139/
 8139C/8139C+ (rev 10)

これが目的のデバイスです<ref>カーネルソースを検索するだけでもいいかも知れません。この場合、Realtek Semiconductor製の RTL-8139/8139C/8139C+です。でも、このやり方は必ずしもうまくいくとは限りません。</ref>。

{{LKN/Tip | ほとんどのディストリビューションでは''lspci''は''/usr/sbin''にありますが、なければ以下のコマンドで調べられます。
 $ '''which lspci'''
 /usr/bin/lspci
}}

<references/>

{{Nav
|prev=LKN/Chapter6
|next=LKN/Chapter8
}}
