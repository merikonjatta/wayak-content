<!-- vim: set noexpandtab shiftwidth=4 wrap linebreak filetype=mediawiki: -->
{{#set: title=第7章: カーネルのカスタマイズ}}
{{Nav
|prev=LKN/Chapter6
|next=LKN/Chapter8
}}

= 第7章: カーネルのカスタマイズ =

カーネルをビルドする中で、どのドライバやオプションが必要でどれが不要なのかを判断するのは最も難しい作業の一つです。この章では正しいドライバを見つける手順について説明します。

== ディストリビューションカーネルを使用する ==

どのモジュールが必要かを判断する簡単な方法の一つは、ディストリビューションに付属のカーネルパッケージを調べることです。起動中、動作中のシステムでは既に適切なドライバがハードウェア構成に従って組み込まれているので、判断が楽になります。

カーネルのビルド対象マシンにまだLinuxディストリビューションがインストールされていないなら、LiveCD版を使うのをお勧めします。LiveCD版を起動すればハードウェア構成に合わせたドライバの判別ができます。

=== コンフィギュレーションファイルはどこ？ ===

ほとんどのディストリビューションは、カーネルパッケージにコンフィギュレーションファイルを同梱しています。コンフィグファイルの場所についてはディストリビューションごとのドキュメントを参照してください。通常は''/usr/src/linux/''ディレクトリ配下にあります。

コンフィグファイルが見つからないときは、カーネル自体を見てみてください。ほとんどのディストリビューションカーネルはコンフィグファイルを''/proc''に置くようビルドされています。これを確認するには：

 $ '''ls /proc/config.gz'''
 /proc/config.gz

このファイルが存在するなら、あなたのカーネルソースディレクトリにコピーして展開しましょう。

 $ '''cp /proc/config.gz &tilde;/linux/'''
 $ '''cd &tilde;/linux'''
 $ '''gzip -dv config.gz'''
 config.gz:       74.9% -- replaced with config

このコンフィグファイルを使えばとりあえず正常に動作するカーネルイメージを作ることができますが、欠点として、ソースツリーに存在するほぼ全てのモジュールやドライバをビルドしてしまう点が挙げられます。一台のマシンではそんなに大量のモジュールは必要としません。ですので、不要なオプションをオフにしていくことをお勧めしますが、確実に不要だと分かるものだけオフにしていくよう注意してください。どこかで依存関係があるものをオフにしてしまうと正常に動作しません。


=== 必要なモジュールを判別する ===

ディストリビューションカーネルから取ったコンフィグファイルを使うと、ビルドに大変長い時間がかかります。これは数々のドライバがいちいちビルドされるからです。必要なものだけに絞れば、ビルド時間が大幅に短縮出来るだけでなく、一部の（場合によっては全ての）ドライバをカーネル自体に組み込んでしまうことができ、メモリを節約できたり、アーキテクチャによっては高速に動作するカーネルを作ることができます。ここではどのハードウェアにどのドライバが必要かを判断する2つの例を紹介します。

動作中のシステムでハードウェアにどのドライバが結びついているかを示す場所がいくつかあります。もっとも重要なのは''sysfs''と呼ばれる仮想ファイルシステムです。''sysfs''は常に''/sys''にマウントされています。''sysfs''からはあちこちへシンボリックリンクが張られ、カーネルのどの部分が他の部分とどう結びついているのかを垣間見ることができます。

以降の例には本物の''sysfs''パスやハードウェアの種別が含まれます。あなたのマシンでは別の値になると思いますが、情報が配置されている相対的な場所は同じです。違う値が表示されるからといって慌ててはいけません。

さらに、''sysfs''の内部構造は頻繁に変更されます。これはカーネル開発者がカーネルの内部構造をユーザスペースに提示するベストな方法を模索し、整理や改変を続けるからです。したがってこの章で紹介するいくつかのシンボリックリンクは最新版では亡くなっているかも知れません。ただ、その場合も情報はなくなったわけではなく、別の場所に移動しただけだと覚えておいてください。

==== 例：ネットワークドライバを判別する ====

NIC（ネットワーク・インタフェース・カード）はシステムの中でも最も重要なハードウェアの一つです。ネットワーキングが正常にできるようにするためにはドライバの判別が必須です。

まず、ネットワーク接続名からPCIデバイスを見つけます。そのためにはまずネットワーク接続名をリストします。

 $ '''ls /sys/class/net/'''
 eth0  eth1  eth2  lo

''lo''ディレクトリはループバックデバイスで、実際のネットワークデバイスとは関係ありません。ここでは''eth1''、''eth1''そして''eth2''ディレクトリが実際のネットワークですので、そこに注目します。

さらにどのNICが大事かを判別するには''ifconfig''を使います。

 $ '''/sbin/ifconfig -a'''
 eth0      Link encap:Ethernet  HWaddr 00:12:3F:65:7D:C2
           inet addr:192.168.0.13  Bcast:192.168.0.255  Mask:255.255.255.0
           UP BROADCAST NOTRAILERS RUNNING MULTICAST  MTU:1500  Metric:1
           RX packets:2720792 errors:0 dropped:0 overruns:0 frame:0
           TX packets:1815488 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:100
           RX bytes:3103826486 (2960.0 Mb)  TX bytes:371424066 (354.2 Mb)
           Base address:0xdcc0 Memory:dfee0000-dff00000
 eth1      Link encap:UNSPEC  HWaddr 80-65-00-12-7D-C2-3F-00-00-00-00-00-00-
           00-00-00
           BROADCAST MULTICAST  MTU:1500  Metric:1
           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:1000
           RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
 eth2      Link encap:UNSPEC  HWaddr 00-02-3C-04-11-09-D2-BA-00-00-00-00-00-
           00-00-00
           BROADCAST MULTICAST  MTU:1500  Metric:1
           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:1000
           RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
 lo        Link encap:Local Loopback
           inet addr:127.0.0.1  Mask:255.0.0.0
           UP LOOPBACK RUNNING  MTU:16436  Metric:1
           RX packets:60 errors:0 dropped:0 overruns:0 frame:0
           TX packets:60 errors:0 dropped:0 overruns:0 carrier:0
           collisions:0 txqueuelen:0
           RX bytes:13409 (13.0 Kb)  TX bytes:13409 (13.0 Kb)

この中で、''eth0''が実際に動作中のNICだと分かります。

 eth0      Link encap:Ethernet  HWaddr 00:12:3F:65:7D:C2
           inet addr:192.168.0.13  Bcast:192.168.0.255  Mask:255.255.255.0

この出力が、''eth0''はイーサネットデバイスで、正常なIPアドレスが割り当てられていることを示しているからです。

さて、このeth0が新しいカーネルでも正常に動作するように、これをコントロールしているドライバを見つけます。そのためには、''sysfs''ファイルシステムにある色々なリンクを次のコマンドで調べます。

 $ '''basename &grave;readlink /sys/class/net/eth0/device/driver/module&grave;'''
 e1000

この結果、<code>e1000</code>というモジュールが''eth0''をコントロールしていることが分かりました。この''basename''コマンドは以下のことをしてくれています：

# シンボリックリンク''/sys/class/net/eth0/device''を辿り、''/sys/device''ツリー内で''eth0''のコントローラについての情報がある場所へ行き着きます。新しいバージョンのカーネルでは''/sys/class/net/eth0''ディレクトリ自体がシンボリックリンクになっているかも知れません。
# ''sysfs''内でデバイスについて説明しているこのディレクトリには、このデバイスのドライバへのシンボリックリンクがあります。そのリンクは''driver''という名前なので、それを辿ります。
# ''sysfs''内でドライバについて説明しているこのディレクトリには、このドライバを含むモジュールへのシンボリックリンクがあります。このリンクは''module''という名前です。'7readlink''コマンドでこのリンクの対象パスを取得します。
# 重要なのはモジュールの名前だけですので、不要なパスを切り捨てます。''basename''はそのためのコマンドです。

というわけで、このワンライナーでリンクをいくつか辿り、basenameを取得したことになります。

これでモジュール名が分かりましたので、該当するカーネルコンフィグオプションを探します。メニューを使って探してもいいですし、カーネルのソースコード自体を検索すれば正しいオプションかどうかを確認できます。

 $ '''cd &tilde;/linux/linux-2.6.17.8'''
 $ '''find -type f -name Makefile | xargs grep e1000'''
 ./drivers/net/Makefile:obj-$(CONFIG_E1000) += e1000/
 ./drivers/net/e1000/Makefile:obj-$(CONFIG_E1000) += e1000.o
 ./drivers/net/e1000/Makefile:e1000-objs := e1000_main.o e1000_hw.o e1000_
 ethtool.o e1000_param.o

'''<code>e1000</code>'''をあなたの目的のモジュール名に変えるのを忘れないで下さい。

''find''コマンドの出力では<code>CONFIG_</code>がつく文字列に注目してください。これがカーネルのコンフィグに必要となるオプション名です。ここでは<code>CONFIG_E1000</code>がそれです。

これでカーネルのコンフィグに必要な情報が揃いました。メニューコンフィグツールを起動します。

 $ '''make menuconfig'''

<code>/</code>キーを押すと検索画面が表示されますので、さきほどのオプション名を入力します。<code>CONFIG_</code>の部分は省略します（図7-1）。

[[File:lkn-fig0701.gif|none|frame|図7-1. menuconfigの検索]]

するとどこにこのオプションがあるかが示されます（図7-2）。

[[File:lkn-fig0702.gif|none|frame|図7-2. menuconfigの検索結果]]

この画面では最初の項目が目的のオプションです。<code>E1000</code>モジュールを組み込むにはこのオプションを有効にすべきだと書いてあります。

 Device Drivers
     Network device support
         [*] Network device support
             Ethernet (1000 Mbit)
         [*] Intel(R) PRO/1000 Gigabit Ethernet support

以上の手順はカーネルで動作中のどのデバイスでも有効です。


=== 例：USBデバイス ===

別の例として、USB/シリアルコンバータを見てみましょう。現在''/dev/ttyUSB0''ポートに接続されているとすると、''sysfs''のttyセクションを見てみます。

 $ '''ls /sys/class/tty/ | grep USB'''
 ttyUSB0

前節と同じようにこのデバイスをコントロールしているモジュールを探します。

 $ '''basename `readlink /sys/class/tty/ttyUSB0/device/driver/module`'''
 pl2303

続けてカーネルのソースツリーを検索し、コンフィグオプション名を見つけます。

 $ '''cd &tilde;/linux/linux-2.6.17.8'''
 $ '''find -type f -name Makefile | xargs grep pl2303'''
 ./drivers/usb/serial/Makefile:obj-$(CONFIG_USB_SERIAL_PL2303) += pl2303.o

図7-3のようにコンフィグツールを使い、設定すべきオプションを探します。

[[File:lkn-fig0703.gif|none|frame|図7-3. USB_SERIAL_OL2303を検索]]

すると図7-4のような結果が出ます。

[[File:lkn-fig0704.gif|none|frame|図7-4. USB_SERIAL_OL2303の検索結果]]

これで<code>USB Prolific 2303 Single Port Serial Driver</code>オプションを探し当てることができました。


=== デバイス検索のまとめ ===

既に動作中のデバイスのドライバを検索する手順をまとめると、以下のようになります。

# デバイスが結びついている''sysfs''クラスデバイスを探します。ネットワークデバイスは''/sys/class/net''以下、ttyデバイスは''/sys/class/tty''以下にあります。他の種類のデバイスは''/sys/class''内のその他のディレクトリにあります。
# ''sysfs''ツリーを調べ、このデバイスをコントロールするモジュールを見つけます。''/sys/class/class_name/device_name/device/driver/module''にあるでしょう。''readlink''と''basename''を使ってモジュール名を表示させます。
# ''find''と''grep''を使ってカーネルソース内を検索し、<code>CONFIG_</code>名を見つけます。
# カーネルコンフィグシステムでその設定項目を探し、メニューからそのドライバのビルドを有効にします。


=== 何が必要かをカーネルに聞く ===

''sysfs''を探索してモジュール名を見つける方法を解説しましたが、このスクリプトを使うと同じ作業を（別のやり方で）簡単に行うことができます。

 #!/bin/bash
 #
 # find_all_modules.sh
 #
 for i in &grave;find /sys/ -name modalias -exec cat {} \;&grave;; do
     /sbin/modprobe --config /dev/null --show-depends $i ;
 done | rev | cut -f 1 -d '/' | rev | sort -u

このスクリプトは本書のウェブサイトからダウンロードすることができます。

このスクリプトは''sysfs''内に存在する''modalias''と呼ばれるファイルを全て発見します。''modalias''ファイルにはモジュールエイリアスが含まれ、これによって''modprobe''プログラムがデバイス用のドライバモジュールを見つけることができます。他にもモジュールエイリアスには製造者、デバイスID、クラスタイプなどの識別子が含まれます。

全てのカーネルドライバモジュールは、サポートするデバイスの一覧を内部的に持っています。''modprobe''は、全ドライバの対応デバイスリストをスキャンして目的のエイリアスを探します。一致するものが見つかればそのモジュールをロードします（これがLinuxの自動ドライバロードの仕組みです）。

このスクリプトでは''modprobe''を起動しますが、実際にモジュールをロードする前に停止させ、どのようなアクションをする予定だったかを表示させます。つまり、現在のシステムに存在する全デバイスを動作させるために必要な全モジュールのリストが出力されるわけです。この出力を少し整形しソートすると、このようになります。

 $ '''find_all_modules.sh'''
 8139cp.ko
 8139too.ko
 ehci-hcd.ko
 firmware_class.ko
 i2c-i801.ko
 ieee80211.ko
 ieee80211_crypt.ko
 ipw2200.ko
 mii.ko
 mmc_core.ko
 pcmcia_core.ko
 rsrc_nonstatic.ko
 sdhci.ko
 snd-hda-codec.ko
 snd-hda-intel.ko
 snd-page-alloc.ko
 snd-pcm.ko
 snd-timer.ko
 snd.ko
 soundcore.ko
 uhci-hcd.ko
 usbcore.ko
 yenta_socket.ko

これが、今のマシンに存在する全てのハードウェアを動作させるために必要なモジュールの一覧です。

もしかすると、スクリプトから以下のようなエラーメッセージが出るかも知れません。

 FATAL: Module pci:v00008086d00002592sv000010CFsd000012E2bc03sc00i00 not
 found.
 FATAL: Module serio:ty01pr00id00ex00 not found.

これはそのデバイス用のモジュールが見つからなかったということですが、心配する必要はありません。単にそのデバイス用のカーネルドライバが存在しないというだけのことです。


== 必要なモジュールを自分で探す ==

ディストリビューションカーネルを目的のマシンで動かすことができない場合もあると思います。また、新しいハードウェアを追加する必要があるかもしれません。その場合、上記の方法は使えません。この節ではそういったハードウェアを利用するための手順を解説します。

最も簡単な方法は、同じタイプの全てのドライバをビルドしてしまうことです。すると''udev''スタートアップ・プロセスがドライバをデバイスに紐付けてくれます。その後は上で説明した方法でドライバをそのモジュール、カーネルコンフィグオプションを探し当てることができます。

全部のドライバをビルドしたくない場合や、何らかの理由でうまくいかないときは、もう少し作業が必要になります。以下の手順は複雑で、カーネルのソースコードに度々潜らなければいけませんが、恐れてはいけません。あなたがハードウェアとカーネルをより深く理解する助けになるでしょう。

手順はデバイスの種類によって異なります。ここではもっとも一般的な二種類（PCIとUSB）について解説しますが、他の種類のデバイスでも有効かもしれません。

あと、カーネルがすべてのファイルシステムをきちんと見ることができるようにするのが大切です（特にrootファイルシステム）。これについては後に詳解します。


=== PCIデバイス ===

PCIデバイスは製造元IDとデバイスIDによって識別されます。この2つの組み合わせごとに別のドライバが必要になることもあります。この事実が以下の手順の前提となります。

例として、現在のカーネルバージョンでは動作していないPCIのネットワークカードを想定しましょう。例の中の具体的な文字列や値はあなたの状況にそのまま当てはまらないと思いますが、ドライバを探すのに必要な手順は同じです。

まず、PCIデバイスを探します。全てのPCIデバイスの一覧を取得するには''lspci''を使います。ネットワークカードを探したいので、結果を<code>ethernet</code>という文字列で絞り込みます（case-insensitive）。

 $ '''/usr/sbin/lspci | grep -i ethernet'''
 06:04.0 Ethernet controller: Realtek Semiconductor Co., Ltd.  RTL-8139/
 8139C/8139C+ (rev 10)

これが目的のデバイスです<ref>カーネルソースを検索するだけでもいいかも知れません。この場合、Realtek Semiconductor製の RTL-8139/8139C/8139C+です。でも、このやり方は必ずしもうまくいくとは限りません。</ref>。

{{LKN/Tip | ほとんどのディストリビューションでは''lspci''は''/usr/sbin''にありますが、なければ以下のコマンドで調べられます。
 $ '''which lspci'''
 /usr/sbin/lspci
}}

''lspci''の出力の最初の数文字はこのデバイスのPCIバスIDを示します（<code>06:04.0</code>）。''sysfs''を探索する際にこの文字列を使います。

''sysfs''に入り、全てのPCIデバイスの一覧で名前を確認します。

 $ '''cd /sys/bus/pci/devices/'''
 $ '''ls'''
 0000:00:00.0  0000:00:1d.0  0000:00:1e.0  0000:00:1f.3  0000:06:03.3
 0000:00:02.0  0000:00:1d.1  0000:00:1f.0  0000:06:03.0  0000:06:03.4
 0000:00:02.1  0000:00:1d.2  0000:00:1f.1  0000:06:03.1  0000:06:04.0
 0000:00:1b.0  0000:00:1d.7  0000:00:1f.2  0000:06:03.2  0000:06:05.0

冒頭の<code>0000:</code>はこの際無視します<ref>64bitプロセッサの中には''lspci''でこのプレフィックスが表示されるものもありますが、大半のLinuxマシンでは表示されません。</ref>。先ほどのバスIDに相当するディレクトリに移動します。

 $ '''cd 0000:06:04.0'''

この中で''vendor''と''device''各ファイルの中身を確認します。

 $ '''cat vendor'''
 0x10ec
 $ '''cat device'''
 0x8139

これらが製造元IDとデバイスIDです。カーネルはこれらの値を使ってデバイスとドライバを紐付けます。PCIドライバはカーネルにどういった製造元IDとデバイスIDをサポートするかを通知し、それによってカーネルは紐付けを行うのです。これらの値をどこかにメモしておいてください。

次に、この製造元IDとデバイスIDをサポートすると宣言しているカーネルドライバを探します。まずカーネルのソースディレクトリに移動します。

 $ '''cd &tilde;/linux/linux-2.6.17.8/'''

PCI IDが最もみつかりやすいのは''include/linux/pci_ids.h''ファイルです。このファイルの内容を製造元IDで検索します。

 $ '''grep -i 0x10ec include/linux/pci_ids.h'''
 #define PCI_VENDOR_ID_REALTEK           0x10ec

ここで定義されている<code>PCI_VENDOR_ID_REALTEK</code>という定数がデバイスドライバでも使われているはずです。

念のため、同じファイル内でデバイスIDを検索してみます。

 $ '''grep -i 0x8139 include/linux/pci_ids'''.h
 #define PCI_DEVICE_ID_REALTEK_8139      0x8139

この定義も後に役立ちます。

さて、この製造元定数を利用しているソースファイルを探します。

 $ '''grep -Rl PCI_VENDOR_ID_REALTEK *'''
 include/linux/pci_ids.h
 drivers/net/r8169.c
 drivers/net/8139too.c
 drivers/net/8139cp.c

最初のファイルは先程検索したファイルなので無視して結構です。''drivers/net/''に位置する残りの3つのファイルはより詳しく見る必要があります。

これらのうち一つのファイルをエディタで開き、<code>PCI_VENDOR_ID_REALTEK</code>を検索します。''drivers/net/r8169c''では以下のような箇所に登場します。

 static struct pci_device_id rtl8169_pci_tbl[] = {
         { PCI_DEVICE(PCI_VENDOR_ID_REALTEK, 0x8169), },
         { PCI_DEVICE(PCI_VENDOR_ID_REALTEK, 0x8129), },
         { PCI_DEVICE(PCI_VENDOR_ID_DLINK,   0x4300), },
         { PCI_DEVICE(0x16ec,                0x0116), },
         { PCI_VENDOR_ID_LINKSYS,            0x1032, PCI_ANY_ID, 0x0024, },
         {0,},
 };

このようにPCIドライバは、対応するデバイスの一覧を、<code>struct pci_device_id</code>値の配列として持っています。この一覧を見ればドライバが特定のデバイスに対応しているかどうかが分かります。ここでは製造元IDは一致しますが、その右側のデバイスIDの中に目的の0x8139がありません。したがってこのドライバは目的のデバイスに対応していません。

続いて''drivers/net/8139too.c''を見てみます。

 if (pdev-&gt;vendor == PCI_VENDOR_ID_REALTEK &amp;&amp;
     pdev-&gt;device == PCI_DEVICE_ID_REALTEK_8139 &amp;&amp; pci_rev &gt;= 0x20) {
     dev_info(&amp;pdev-&gt;dev,
            "This (id %04x:%04x rev %02x) is an enhanced 8139C+ chip\n",
            pdev-&gt;vendor, pdev-&gt;device, pci_rev);
     dev_info(&amp;pdev-&gt;dev,
            "Use the \"8139cp\" driver for improved performance and stability.\n");
 }

<code>PCI_VENDOR_ID_REALTEK</code>と同時に<code>PCI_DEVICE_ID_REALTEK_8139</code>がチェックされていますが、一致した場合は「性能と安定性向上のため8139cpをお使いください」というメッセージが出るようになっています。次はそのファイルを見てみたほうがいいかも知れません。これほど分かりやすいヒントが出ないこともあるでしょうが、この場合、先ほどのような<code>struct pci_device_id</code>の変数およびその中のデバイスidペアが見つかりませんので、このドライバでは対応していないと予想できます。

最後に''drivers/net/8139cp.c''を見てみます。

 static struct pci_device_id cp_pci_tbl[] = {
         { PCI_VENDOR_ID_REALTEK, PCI_DEVICE_ID_REALTEK_8139,
           PCI_ANY_ID, PCI_ANY_ID, 0, 0, },
         { PCI_VENDOR_ID_TTTECH, PCI_DEVICE_ID_TTTECH_MC322,
           PCI_ANY_ID, PCI_ANY_ID, 0, 0, },
         { },
 };
 MODULE_DEVICE_TABLE(pci, cp_pci_tbl);

ここでは目的の製造元IDとデバイスIDが両方使われています。したがってこのドライバは対応してるはずです。

これでドライバ名が分かりましたので、あとは前節の手順に従ってカーネルのコンフィグオプションを探すだけになります。

まとめると、特定のPCIデバイスをコントロールするPCIドライバを探す手順は以下のようになります：

# ''lspci''を使ってデバイスが接続されているPCIバスIDを見つけます。
# ''sys/bus/pci/devices/0000:bus_id''ディレクトリに入ります。''bus_id''は先ほど見つけたバスIDです。
# ''vendor''と''device''ファイルの内容をメモします。
# カーネルソースの場所に戻り、''include/linux/pci_ids.h''の中身を先ほどの製造元IDとデバイスIDで検索します。
# カーネルソースを検索し、ドライバ内でこれらの値が使われている場所を見つけます。製造元IDとデバイスIDが共に<code>struct pci_device_id</code>の定義内に存在するものを探します。
# カーネルのMakefileの中で対応する<code>CONFIG_</code>値を探します。'''<code>find -type f -name Makefile | xargs grep DRIVER_NAME</code>'''
# カーネルコンフィグ内でこの値を検索し、該当するオプションを設定します。


=== USBデバイス ===

USBデバイスのドライバを探す手順は上述のPCIデバイスのそれとあまり変わりませんが、バスIDを探す部分が異なります。

例として、あるUSBワイヤレスデバイスのドライバを探すことにしましょう。PCIの場合と同じく、あなたの状況とは細かい部分が異なると思いますが、手順は同じです。

まずはバスIDを探す必要があります。これには、''usbutils''パッケージに含まれる''lsusb''ツールを使います。

''lsusb''は接続されている全USBデバイスのリストを出力します。まずは全部のデバイスを見てみましょう。

 $ '''/usr/sbin/lsusb'''
 Bus 002 Device 003: ID 045e:0023 Microsoft Corp. Trackball Optical
 Bus 002 Device 001: ID 0000:0000
 Bus 005 Device 003: ID 0409:0058 NEC Corp. HighSpeed Hub
 Bus 005 Device 001: ID 0000:0000
 Bus 004 Device 003: ID 157e:300d
 Bus 004 Device 002: ID 045e:001c Microsoft Corp.
 Bus 004 Device 001: ID 0000:0000
 Bus 003 Device 001: ID 0000:0000
 Bus 001 Device 001: ID 0000:0000

バスIDが<code>0000:0000</code>になっているものはUSBホストコントローラで、バス自体をコントロールするものですので無視して構いません。これらを除外すると

 $ '''/usr/sbin/lsusb | grep -v 0000:0000'''
 Bus 002 Device 003: ID 045e:0023 Microsoft Corp. Trackball Optical
 Bus 005 Device 003: ID 0409:0058 NEC Corp. HighSpeed Hub
 Bus 004 Device 003: ID 157e:300d
 Bus 004 Device 002: ID 045e:001c Microsoft Corp.

USBはホットプラグが可能ですので、目的のUSBデバイスを一旦抜いてしまいます。もう一度''lsusb''を行うと

 $ '''/usr/sbin/lsusb | grep -v 0000:0000'''
 Bus 002 Device 003: ID 045e:0023 Microsoft Corp. Trackball Optical
 Bus 005 Device 003: ID 0409:0058 NEC Corp. HighSpeed Hub
 Bus 004 Device 002: ID 045e:001c Microsoft Corp.

3つ目にあったデバイスがなくなっていますので、
 Bus 004 Device 003: ID 157e:300d
が目的のデバイスだと分かります。もう一度挿しなおして''lsusb''を行うと、デバイス番号が変わっていることに気づきます。

 $ '''/usr/sbin/lsusb | grep 157e'''
 Bus 004 Device 004: ID 157e:300d

USBデバイス番号は抜き差しするたびに変わるのです。しかし、製造元IDとデバイスIDは変化していません。<code>:</code>でむすばれた2つの4桁の数字がそれです。ここでは製造元IDが<code>157e</code>でデバイスIDが<code>300d</code>です。これらはどこかにメモしておいてください。

PCIと同じく、カーネルソースコードを検索します。残念ながらPCIのように一つのファイルがあらゆるUSB製造元IDを網羅しているわけではありませんので、ソース全体を検索しなければいけません。

 $ '''grep -i -R  -l 157e drivers/*'''
 drivers/atm/pca200e.data
 drivers/atm/pca200e_ecd.data
 drivers/atm/sba200e_ecd.data
 drivers/net/wireless/zd1211rw/zd_usb.c
 drivers/scsi/ql1040_fw.h
 drivers/scsi/ql1280_fw.h
 drivers/scsi/qlogicpti_asm.c

ATMやSCSIデバイスでないことはわかっていますので、これらは除外できます。残ったのは''drivers/ net/wireless/zd1211rw/zd_usb.c''ファイルです。この中で<code>157e</code>という文字列を探すと、以下のようなセクションに登場します。

 static struct usb_device_id 
 <indexterm id="IDX-CHP-7-0240"><primary>struct usb_device_id</primary></indexterm> 
  usb_ids[] = {
         /* ZD1211 */
         { USB_DEVICE(0x0ace, 0x1211), .driver_info = DEVICE_ZD1211 },
         { USB_DEVICE(0x07b8, 0x6001), .driver_info = DEVICE_ZD1211 },
         { USB_DEVICE(0x126f, 0xa006), .driver_info = DEVICE_ZD1211 },
         { USB_DEVICE(0x6891, 0xa727), .driver_info = DEVICE_ZD1211 },
         { USB_DEVICE(0x0df6, 0x9071), .driver_info = DEVICE_ZD1211 },
         { USB_DEVICE(0x157e, 0x300b), .driver_info = DEVICE_ZD1211 },
         /* ZD1211B */
         { USB_DEVICE(0x0ace, 0x1215), .driver_info = DEVICE_ZD1211B },
         { USB_DEVICE(0x157e, 0x300d), .driver_info = DEVICE_ZD1211B },
         {}
 };

PCIの時と同じく、ドライバは対応するデバイスの一覧をカーネルに対して提示しています。このように<code>struct usb_device_id</code>の配列を使用します。
 { USB_DEVICE(0x157e, 0x300b), .driver_info = DEVICE_ZD1211 },
という行で、目的のデバイスをサポートしていることが分かります。

ここまでくれば、あとは前述のようにカーネルの''Makefile''の中からオプションを検索すればOKです。

まとめると、USBデバイスのドライバを探す手順は以下のようになります。

# デバイスを抜き差ししながら''lsusb''を使って製造元IDとデバイスIDを見つけます。
# カーネルソースツリーを製造元IDとデバイスIDで検索します。2つの値が<code>struct usb_device_id</code>に同時に登場するものを見つけます。
# カーネルのMakefileの中で対応する<code>CONFIG_</code>値を探します。'''<code>find -type f -name Makefile | xargs grep DRIVER_NAME</code>'''
# カーネルコンフィグ内でこの値を検索し、該当するオプションを設定します。


=== Rootファイルシステム ===

システムの主要な部分はrootファイルシステムからブートします。ここにはディストリビューションとともに初期起動するプログラムと、そのマシン用のシステムコンフィギュレーションが含まれます。要は重要なファイルシステムであり、カーネルのブート時にカーネルがここを見られる状態でないと正常に動作しないということです。

新しく設定したカーネルがこのようなエラーを吐いてクラッシュすることがあります。

 VFS: Cannot open root device hda2 (03:02)
 Please append a correct "root=" boot option
 Kernal panic: VFS: Unable to mount root fs on 03:02

これはrootファイルシステムが見つからないということです。ブートにRAMディスクを使わないなら、rootパーティション用のファイルシステムとそのディスクコントローラを両方、カーネルに組み込んでしまうのがお勧めです（モジュールとしてではなく）。RAMディスクを使うならモジュールでも構わないでしょう。

{{LKN/Tip | ブート時にRAMディスクを使っているかどうか、どうやって確認するかですが、5章で、ディストリビューションのインストールスクリプトを使うか自分でインストールするかを選びました。インストールスクリプトを使ったなら、恐らくRAMディスクも使っています。自分でインストールしたなら、恐らくRAMディスクを使っていません。}}

以下の節ではカーネルにrootファイルシステムを見つけさせる方法を解説します。

=== ファイルシステムの種類 ===

まずはrootパーティションのファイルシステムの種類を判別します。''mount''コマンドを使います。

 $ '''mount | grep "/"'''
 /dev/sda2 on / type ext3 (rw,noatime)

<code>type</code>のあとに出ているのがファイルシステムの種類です。ここでは<code>ext3</code>となっています。カーネルコンフィギュレーションを見て、このファイルシステムタイプが有効になっていることを確認してください（{{Link|LKN/Chapter8}}を参照）。

=== ディスクコントローラ ===

先ほどの出力の冒頭に、rootファイルシステムがマウントされているブロックデバイスが出ています。ここでは<code>/dev/sda2</code>です。ファイルシステムが有効になっているのは確認できましたが、なおかつこのブロックデバイスが正常に動作していることを確認しなければいけません。再び''sysfs''を覗きます。

ブロックデバイスは''/sys/block''か''/sys/class/block''にあります（カーネルのバージョンによって異なります）。ブロックデバイスはそれぞれツリーになっており、パーティションが子要素になっています。

 $ '''tree -d /sys/block/ | egrep "hd|sd"'''
 |-- hdc
 |-- hdd
 &grave;-- sda
     |-- sda1
     |-- sda2
     |-- sda3

''mount''の結果より、<code>sda2</code>が正常に設定されていることを確認せねばなりません。これはパーティションであるため（ブロックデバイスには番号がありませんがパーティションには番号がついています）、<code>sda</code>ブロックデバイスごと設定します。ブロックデバイスなしではそのパーティションにアクセスすることはできないからです。

この<code>sda</code>ブロックデバイスは、''sysfs''内では上で述べたネットワークデバイスと同じように表現されています。デバイスの該当ディレクトリ内に<code>device</code>というシンボリックリンクがあり、このブロックデバイスをコントロールする論理デバイスを指しています。

 $ '''ls -l /sys/block/sda'''
   ...
 device -&gt; ''../../devices/pci0000:00/0000:00:1f.2/host0/target0:0:0/0:0:0:0''
   ...

ここから''sysfs''内のリンクをたどっていき、ドライバを探し当てます。

 $ '''ls -l /sys/devices/pci0000:00/0000:00:1f.2/host0/target0:0:0/0:0:0:0'''
   ...
 driver -&gt; ''../../../../../../bus/scsi/drivers/sd''
   ...

これでSCSIディスクコントローラドライバがこのデバイスを動かしていることが分かりました。そこでカーネルにSCSIディスクのサポートを組み込みます。

さらにリンクを辿ってドライバを探します。

 $ '''ls -l /sys/devices/pci0000:00/0000:00:1f.2/host0/target0:0:0'''
   ...

このディレクトリには<code>driver</code>というリンクが無いので、もうひとつ上に上がります。

 $ '''ls -l /sys/devices/pci0000:00/0000:00:1f.2/host0'''
   ...

ここにもないので、さらに上に上がります。

 $ '''ls -l /sys/devices/pci0000:00/0000:00:1f.2'''
   ...
 driver -&gt; ''../../../bus/pci/drivers/ata_piix''
   ...

ありました。このディスクコントローラを組み込めばいいはずです。

最終的に、このrootファイルシステムのためには<code>ext3</code>、<code>sd</code>そして<code>ata_piix</code>ドライバをカーネルコンフィギュレーションで有効にすることで、正常にブートさせることが可能です。


=== ヘルパースクリプト ===

この章のはじめの方で述べたとおり、''sysfs''内のファイルやディレクトリの配置はリリースごとに多少異なります。ここで紹介するスクリプトを使えば、任意のデバイスに関して必要なカーネルドライバとモジュール名を調べることができます。''sysfs''担当のカーネル開発者の協力を得て作成されていますので、2.6系の全てのカーネルで動作するはずです。

例えば上の<code>sda</code>ブロックデバイスの場合だと、

 $ '''get-driver.sh sda'''
 looking at sysfs device: /sys/devices/pci0000:00/0000:00:1f.2/host0/
 target0:0:0/0:0:0:0
 found driver: sd
 found driver: ata_piix

USB/シリアルデバイスのような複雑なケースでも、

 $ '''get-driver.sh ttyUSB0'''
 looking at sysfs device: /sys/devices/pci0000:00/0000:00:1d.3/usb4/4-2/4-2.3/
 4-2.3:1.0/ttyUSB0
 found driver: pl2303 from module: pl2303
 found driver: pl2303 from module: pl2303
 found driver: usb from module: usbcore
 found driver: usb from module: usbcore
 found driver: usb from module: usbcore
 found driver: uhci_hcd from module: uhci_hcd

このスクリプトは本書のウェブサイトからダウンロードできます。


<pre>
#!/bin/sh
#
# Find all modules and drivers for a given class device.
#
if [ $# != "1" ] ; then
    echo
    echo "Script to display the drivers and modules for a specified sysfs class
device"
    echo "usage: $0 &lt;CLASS_NAME&gt;"
    echo
    echo "example usage:"
    echo "      $0 sda"
    echo "Will show all drivers and modules for the sda block device."
    echo
    exit 1
fi
DEV=$1
if test -e "$1"; then
    DEVPATH=$1
else
    # find sysfs device directory for device
    DEVPATH=$(find /sys/class -name "$1" | head -1)
    test -z "$DEVPATH" &amp;&amp; DEVPATH=$(find /sys/block -name "$1" | head -1)
    test -z "$DEVPATH" &amp;&amp; DEVPATH=$(find /sys/bus -name "$1" | head -1)
    if ! test -e "$DEVPATH"; then
        echo "no device found"
        exit 1
    fi
fi
echo "looking at sysfs device: $DEVPATH"
if test -L "$DEVPATH"; then
    # resolve class device link to device directory
    DEVPATH=$(readlink -f $DEVPATH)
    echo "resolve link to: $DEVPATH"
fi
if test -d "$DEVPATH"; then
    # resolve old-style "device" link to the parent device
    PARENT="$DEVPATH";
    while test "$PARENT" != "/"; do
        if test -L "$PARENT/device"; then
            DEVPATH=$(readlink -f $PARENT/device)
            echo "follow 'device' link to parent: $DEVPATH"
            break
        fi
        PARENT=$(dirname $PARENT)
    done
fi
while test "$DEVPATH" != "/"; do
    DRIVERPATH=
    DRIVER=
    MODULEPATH=
    MODULE=
    if test -e $DEVPATH/driver; then
        DRIVERPATH=$(readlink -f $DEVPATH/driver)
        DRIVER=$(basename $DRIVERPATH)
        echo -n "found driver: $DRIVER"
        if test -e $DRIVERPATH/module; then
            MODULEPATH=$(readlink -f $DRIVERPATH/module)
            MODULE=$(basename $MODULEPATH)
            echo -n " from module: $MODULE"
        fi
        echo
    fi
    DEVPATH=$(dirname $DEVPATH)
done
</pre>

<references/>

{{Nav
|prev=LKN/Chapter6
|next=LKN/Chapter8
}}
