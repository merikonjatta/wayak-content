<!-- vim: set shiftwidth=4 wrap filetype=mediawiki: -->
{{#set: title=第4章: オブジェクト}}
{{Nav
|prev=PerlHard/Chapter3
|next=PerlHard/Chapter5
}}

= 第4章: オブジェクト =

ある言語が「オブジェクト指向だ」と言った時、それが意味するのは、言語にオブジェクト指向プログラミングのために用意された文法がひと通り揃っていることだろう。そういう意味ではPerlはオブジェクト指向言語とは言えないかもしれない。だが、Perlでオブジェクト指向なプログラムを書く方法は色々あるし、そのために便利な機能も揃っている。

基本的に、オブジェクトとは参照である。本章ではこれを踏み台として、オブジェクト指向プログラミングでよく使われる機能を紹介する。


== 4.1 パッケージ ==

どんな参照もオブジェクトであるといえなくもないが、オブジェクトはクラスに属すほうがいいだろう。Perlでは、<code>package</code>を作ってオブジェクトを<code>bless</code>することで、オブジェクトをそのクラスに属させることができる。

<code>package</code>宣言をするとそこから新たなパッケージになる。そこからファイル末尾、コードブロックの終わり、あるいは別の<code>package</code>宣言までの間に書いた全部の変数とサブルーチンは、そのパッケージに属す。

次のコードでは、まず<code>value</code>というグローバル変数を作ってから<code>Fred</code>というパッケージを宣言する。パッケージ内では同じ名前のグローバル変数を作っているが、衝突しない。パッケージは独自のネームスペースを持つのだ。print文では現在のパッケージにおける<code>$value</code>が評価されるので、homeと出力される。
    our $value = "away";
    package Fred;
    our $value = "home";
    print "$value\n";
グローバル変数とは厳密にはパッケージ変数なのだ。パッケージを宣言しなかった場合は<code>main</code>というパッケージに自動的に属するだけだ。

別のパッケージの変数にアクセスするには完全修飾（fully qualified）な名前を使う。先程の例では<code>$main::value</code>とすればawayが出力される。


== 4.2 blessオペレータ ==

あらゆる参照はオブジェクトであると言えるが、オブジェクトとして最もよく使われるのはハッシュだ。それぞれのキーがインスタンス変数であると見なせる。だから、オブジェクトを作成する一番シンプルなやり方は、ハッシュへの参照をつくることだ。

これには、すでに説明したとおり、バックスラッシュ演算子を使う方法がある。
    my %hash;
    my $hashref = \%hash;
また、ヒゲカッコを使ってもいい。
    my $nobody = { };
    my $person = { name => "Allen B. Downey",
                   webpage => "allendowney.com" };
最初の行は空のハッシュを作って<code>$nobody</code>という名前で参照している。次のニ行ではキーが2つあるハッシュを作って<code>$person</code>という名前で参照している。

さて、このオブジェクトがあるクラスに属することをPerlに伝えるには、<code>bless</code>を使う。
    package Person;
    my $person = { name => "Allen B. Downey",
                   webpage => "allendowney.com" };
    bless $person, "Person";
これで、後述の方法でメソッド呼び出し、すなわちPersonで定義されたメソッドの呼び出しが可能になる。


== 4.3 メソッド ==

メソッドとは、単に第一引数にオブジェクトを取るサブルーチンのことだ。次の<code>name</code>というサブルーチンは第一引数に<code>Person</code>を取って、そこに定義されている<code>name</code>というインスタンス変数の値を返す。
    sub name {
        my $self = shift;
        my %hash = %$self;
        return $hash{name};
    }

Personはハッシュへの参照なので、キーから値を引く前に実際のハッシュを逆参照する必要があるが、これは矢印演算子を使えば簡単に書ける。
    sub name {
        my $self = shift;
        return $self->{name};
    }
ここでnameサブルーチンはインスタンス変数の値を返すだけなのでアクセサメソッドになっている。

このメソッドを呼び出すには、Personオブジェクトをパラメータとして渡せばいい。
    my $name = name $person;
あるいは、ここでも矢印演算子を使えばいい。
    my $name = $person->name;
後者の書き方のほうがオブジェクト指向っぽい。


アクセサメソッドはセッターの機能も持たせたほうが便利なことが多いだろう。
    sub name {
        my $self = shift;
        if (@_) { $self->{name} = shift };
        return $self->{name};
    }
第一引数はやはり対象のオブジェクトだ。第二引数は、存在すればインスタンス変数の更新に使われる。どちらにせよ最終的にはnameの値が返される。

このアクセサもやはり呼び出し方法が2つある。一つはPersonオブジェクトを第一引数として明示する方法
    name $person, "Nella B. Yenwod";
もう一つは矢印演算子を使う方法だが、矢印演算子のあとに引数のリストをくっつけるのはできない。
    $person->name "Nella B. Yenwod"; # ダメ
が、代わりにカッコを使える。
    $person->name("Nella B. Yenwod");

こういう時Perlistは「やり方は一つではない」(There's more than one way to do it)と叫ぶのだ。TMTOWTDIと略されるPerlのモットーである。アンチPerlistはFORHOTDWと反論する。For obscure reasons, half of them don't work、「そのうち半分は訳がわからない」。


== 4.4 コンストラクタ ==

コンストラクタとは、オブジェクトを作成して返すメソッドである。逆に、オブジェクトを作成して返すあらゆるメソッドはコンストラクタだ。

慣例として、コンストラクタにはnewという名前がつけられる。Personのコンストラクタはこんな風になる。
    sub new {
        my $self = { @_ };
        bless $self, "Person";
    }
パラメータはキーと値のリストで、これがハッシュの初期化に使われる。呼び出しは
    my $person = new(name => "Allen B. Downey");
でできるが、クラス名を使って次のように呼び出す方が一般的である。
    my $person = Person->new(name => "Allen B. Downey");
この場合、クラス名が最初の引数として渡るので、blessの引数としてこれを使えばいい。
    sub new {
        my $class = shift;
        my $self = { @_ };
        bless $self, $class;
    }
これはコンストラクタでは非常によく使われるパターンである。クラスを定義するときはまずこの形から入ればいい。


== 4.5 オブジェクトを出力する ==

デバッグのために、オブジェクトの状態を出力するメソッドが必要な場合が多い。こんな風に書ける。
    sub print {
        my $self = shift;
        while ((my $key, my $value) = each %$self) {
            print "$key => $value\n";
        }
    }
引数はハッシュへのリファレンスなので、<code>%$self</code>で逆参照している。

このメソッドはキーと値を出力するだけだ。もしある値が参照なら、参照の種類と識別子が出力される。もっと有用な情報を出力するようにしたほうがいいかも知れない。


== 4.6 ヒープ ==

もうちょっと興味深いオブジェクトの例としてヒープを実装してみる。ヒープについて知らない場合はデータ構造に関する教科書を読んでみよう。http://thinkapjava.com/ で入手できる Think Like a Computer Scientist: Java Versionなどでもよい。

少しずつ書いていきたいので、まずは数値のヒープを作る。パッケージ宣言とコンストラクタはこんな感じだ。
    package Heap;
    sub new {
        my $class = shift;
        my $self = { aref => [ "" ],
                     next => 1
                     @_};
        bless $self, $class;
    }

インスタンス変数は2つあって、ひとつは配列への参照（aref）で、もうひとつは配列内で次に使えるインデックス(next）だ。<code>[""]</code>というのは空文字列ひとつを要素として持つ配列の作成である。配列の最初の要素は使わないので、プレースホルダとして空文字列を置いておいた。

この時点でとりあえずprintメソッドを実装しておく。
    sub print {
        my $self = shift;
        my $next = $self->{next};
        my $aref = $self->{aref};
        print "array => @$aref\n";
        print "next => $next\n";
    }
<code>$self-&gt;{aref}</code>は配列への参照なので、逆参照する必要がある。<code>$self-&gt;{next}</code>はスカラーなのでそのまま出力できる。

== 4.7 Heap::add ==

<code>add</code>メソッドの引数は2つだ。ヒープ自体と、追加する値である。与えられた値を配列内の次の位置に入れ、nextをインクリメントする。
    sub add {
        my ($self, $value) = @_;
        my $index = $self->{next};
        $self->{aref}[$index] = $value;
        $self->{next}++;
    }
<code>$index</code>はインスタンス変数nextをコピーしたものなので、値自体は使えるが、更新するには<code>$self-&gt;{next}</code>と書かなければいけない。

実は私は配列の要素にカギカッコでアクセスできるのに違和感を感じている。なにせ<code>$self-&gt;{aref}</code>は配列への参照であって、配列そのものではないし、Perlでは普通は自動的に逆参照が行われないからだ。

次の例を考えてみて欲しい。
    my @array = ( 1, 2, 3 );
    my $aref = [ 1, 2, 3 ];
最初の行はリストを作って@arrayという配列に代入している。次の行は配列への三章を作って$arefという名前をつけている。@arrayの要素にはカギカッコでアクセスできるので、$array[1]は2になる。だが、$aref[1]という書き方は違反である。
    Global symbol "@aref" requires explicit package name
というようなエラーが出るだろう。これは@arefという名前の配列にアクセスしているように見えるからだ。矢印演算子を使って<code>$aref-&gt;[1]</code>と書けば<code>$aref</code>が逆参照去るので2が返される。

ここで配列への参照をハッシュに入れてみる。
    my %hash;
    $hash{aref} = $aref;
これの要素にはどうアクセスすればよいだろうか。<code>$hash{aref}-&gt;[1]</code>のように矢印を使えばいいと思われるかも知れない。たしかにこれは上手くいくが、あまり人気の書き方ではない。実はハッシュから参照を取得し、同時に逆参照してしまうことができるのだ：<code>$hash{aref}[1]</code>。

そろそろ激しい偏頭痛に襲われている頃だろうか。それで正常なので安心して欲しい。

話を戻そう。addとprintを試してみる。
    my $heap = Heap->new;
    for (my $i=0; $i<10; $i++) {
        $heap->add (rand 100);
    }
    $heap->print;
0から100までの間のランダムな数値が10個表示され、nextは10になっているだろう。

== 4.8 Heap::remove ==

このremoveメソッドはヒープの最初の要素を削除して返し、最後の要素を最初の位置に持ってくる。
    sub remove {
        my $self = shift;
        my $aref = $self->{aref};
        my $result = $aref->[1];
        $aref->[1] = pop @$aref;
        $self->{next}--;
        return $result
    }
いつもどおり最初の行で引数を取得する。二行目ではarefのコピーを作る。インスタンス変数が参照なら、ローカル変数に代入することでunpackできる。これは参照なので、配列要素の読み書きができる。

次の三行で3つのことをしている。(1) ヒープの最初の値を取り出す。これを返すことになる。(2) 最後の要素を最初へ移動する理由は後で分かる。(3) nextをデクリメントし、今空けたばかりの位置を指す。

次のループでremoveを試せる。
    for (1..10) {
        my $value = $heap->remove;
        print "$value\n";
    }
ダブルドット<code>..</code>演算子で1から10までの要素が入ったリストを作成している。forをこのようにリストに使うと、foreachのような挙動をする。このコードを実行するとヒープの中身を出力するが、ソートされてもいないし追加された順番でもない。

emptyメソッドを実装するのもいいだろう。
    sub empty {
        my $self = shift;
        return $self->{next} == 1;
    }
するとuntil文で書けるようになる。
    until ($heap->empty) {
        my $value = $heap->remove;
        $value->print;
    }
untilは<code>while(!condition)</code>と同じである。


== 4.9 上へずらす ==

ヒープの実装の基本的な概念として、配列の要素が木構造のノードに対応する。この関係は次の図で示す。

[[File:perlhard-fig0401.png]]

逆の言い方をすると、木構造のノードが配列にレベル順に格納されているとも言える。最初の層の各要素、続いて一つ下の層の各要素、といった具合である。

配列の0番目をスキップして1番目から要素を入れているので、インデックスに対する簡単な算術演算で任意のノードの親ノードと子ノードを見つけられる。インデックスiの要素の子ノード（左側）は2i、子ノード（右側）は2i+1、親要素はi/2だ。

木構造がヒープであるためにはヒープの制約を持つ必要がある：
<blockquote>親ノードの値は常に子ノードの値と等しいか、より大きい。</blockquote>
ということは、最大の要素は常に根本にあるということになる。

したがって、要素をヒープに追加する際、要素を最後に入れた後、適切な場所まで「上へずらし」ていけばよい。

そこでHeap::addのより完全な実装はこのようになる。
    sub add {
        my ($self, $value) = @_;
        my $i = $self->{next};
        $self->{aref}[$i] = $value;
        while ($i > 1) {
            my $parent = POSIX::floor($i/2);
            last if $self->compare($i, $parent) <= 0;
            $self->swap($i, $parent);
            $i = $parent;
        }
        $self->{next}++;
    }
新しい要素のインデックスはiだ。whileループはiが根本（インデックス1）になるまで回る。ループの中では親用その一を特定する。floor関数はPOSIXというモジュール（色んな数学関数がある）に含まれる。もちろん、<code>use POSIX;</code>で読み込んでおく必要がある。

<code>last</code>というのは、ループを終了する命令だ。
    last if $self->compare($i, $parent) <= 0;
は
    if ($self->compare($i, $parent) <= 0) {
        last;
    }
と同じだが字数が少ないし、英語として自然な順序で書かれるので、処理部が短い時はよく使われる。

<code>compare</code>メソッドは2つのインデックスを引数に取り、要素を比較する。
    sub compare {
        my ($self, $i, $j) = @_;
        my $x = $self->{aref}[$i];
        my $y = $self->{aref}[$j];
        if (!defined $x) {
            if (!defined $y) {
                return 0;
            } else {
                return -1;
            }
        }
        if (!defined $y) { return 1 }
        return $x <=> $y;
    }
要素が両方存在すれば、宇宙船演算子を使って比較する。

<code>swap</code>メソッドはインデックスを2つ引数に取り、要素を入れ替える。
    sub swap {
        my ($self, $i, $j) = @_;
        my $aref = $self->{aref};
        ($aref->[$i], $aref->[$j]) = ($aref->[$j], $aref->[$i]);
    }
最初の行で引数を受け、二行目でarefをunpackする。最後の行はリスト代入を使って要素を入れ替えている。

この時点でテストコードを再び走らせると、最初にremoveした要素が一番大きいはずである。addにヒープ制約を加えたからだ。だが、この時点ではremoveがヒープ制約を無視してしまっている。


== 4.10 下へずらす ==

木構造とはサブツリーを2つ持ったルートノードだと考えられる。
[[File:perlhard-fig0402.png]]

木構造がヒープならば、rは全体の最大の要素で、aとbはそれぞれの木構造の最大の要素となる。

ここでrを削除したら、ヒープ制約を維持しなければならない。一つの方法は、最後の要素（cとする）削除してルートノードに据えることである。

もちろん、最後の値が最大だとは限らないので、ヒープ制約が破られるかもしれない。だがこれはすぐに修正できる。ヒープ内で最大の値はaかbだと分かっているので、そのどちらか大きい方をこの新しいルートノードと入れ替えれば良い。

ここでbのほうが大きかったとしよう。ヒープ内に存在する最大の値が分かったので、これをルートノード（rの位置）に置き、cをbがあった所に置く。するとこうなる。
[[File:perlhard-fig0403.png]]

Aには手を加えていないのでヒープだと分かっているが、Bはヒープでなくなっているかもしれない。そこでサブツリーBをまた同じ手順でヒープ化すればいいだけだ。

新しいHeap::removeはこうなる。
    sub remove {
        my $self = shift;
        my $aref = $self->{aref};
        my $result = $aref->[1];
        $aref->[1] = pop @$aref;
        $self->{next}--;
        $self->reheapify(1); # reheapify the tree
            return $result
    }
reheapifyを呼び出してヒープ制約を保持するわけだ。
    sub reheapify {
        my ($self, $i) = @_;
        my $left = 2 * $i;
        my $right = 2 * $i + 1;
        my $winleft = $self->compare($i, $left) >= 0;
        my $winright = $self->compare($i, $right) >= 0;
        return if $winleft and $winright;
        if ($self->compare ($left, $right) > 0) {
            $self->swap($i, $left);
            $self->reheapify($left);
        } else {
            $self->swap($i, $right);
            $self->reheapify($right);
        }
    }
最初の3行はいつもどおり引数を受けて子ノードの位置を特定する。次にルートノードを子ノードと比べる。ルートノードのほうが大きければそのままreturnできるが、そうでなければ大きい方の子要素と入れ替える。

入れ替えた方の子要素をルートノードとするサブツリーを今度はreheapifyする必要があるので、再帰的に呼び出す。再起の深さは最大でもツリーの深さと等しい。

== 4.11 練習 ==

=== 練習4.1 ===

今回はヒープの基本的なメカニズムを実装したが、スカラーしか入れることができないのが悲しい。どんなオブジェクトも比較さえ可能であればヒープに入れたいところだ。

* Thingというパッケージをつくろう。コンストラクタと出力メソッドを実装しよう。
* テストコードを変更し、ランダムな数値の代わりに、ランダムなThing（priorityというインスタンス変数にランダムな値を入れたThingインスタンス）を追加するようにしよう。priorityとは優先度という意味だ。これは数値でよい。一般的にヒープにおいて優先度とは、どういう順番でremoveされるべきかを指す。
* Thingクラスにpriorityのアクセサメソッドを書こう。
* テストコードを変更し、removeした際にそのオブジェクトを出力するようにしよう。
* これでオブジェクトをヒープに追加・削除できるようになったが、順番が狂っているはずだ。compareメソッドを変更し、Thingをpriorityで比較するようにしよう。

うまくいけば、ヒープはポリモーフィックになる。つまり、どんなオブジェクトでもpriorityという属性さえあれば正しい順番でremoveできるようになる。

このプログラムは次の章でも使うのでheap.plという名前で保存しておこう。


<references/>

{{Nav
|prev=PerlHard/Chapter3
|next=PerlHard/Chapter5
}}
